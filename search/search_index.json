{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>ChromatinHD analyzes single-cell ATAC+RNA data using the raw fragments as input, by automatically adapting the scale at which relevant chromatin changes on a per-position, per-cell, and per-gene basis.</p> <p>Currently, the following models are supported:</p> Pred <p> To learn where and how accessibility is predictive for gene expression </p> Diff <p>To understand the differences in accessibilty between cell types/states</p> Time <p>To learn where and how accessibility is predictive over (pseudo)time</p> Dime <p>To learn the differences in accessibility over (pseudo)time</p>"},{"location":"quickstart/0_install/","title":"Installation","text":"<pre>\n# using pip\npip install chromatinhd\n\n# (soon) using conda\nconda install -c bioconda chromatinhd\n\n# from github\npip install git+https://github.com/DeplanckeLab/ChromatinHD\n</pre> <p>To use the GPU, ensure that a PyTorch version was installed with cuda enabled:</p> In\u00a0[3]: Copied! <pre>import torch\ntorch.cuda.is_available() # should return True\ntorch.cuda.device_count() # should be &gt;= 1\n</pre> import torch torch.cuda.is_available() # should return True torch.cuda.device_count() # should be &gt;= 1 <p>If not, follow the instructions at https://pytorch.org/get-started/locally/. You may have to re-install PyTorch.</p> In\u00a0[\u00a0]: hide_output Copied! <pre>import chromatinhd as chd\n</pre> import chromatinhd as chd"},{"location":"quickstart/0_install/#installation","title":"Installation\u00b6","text":""},{"location":"quickstart/0_install/#frequently-asked-questions","title":"Frequently asked questions\u00b6","text":""},{"location":"quickstart/1_data/","title":"Data preparation","text":"In\u00a0[\u00a0]: hide_output Copied! <pre>import chromatinhd as chd\n</pre> import chromatinhd as chd <p>To speed up training and inference, ChromatinHD stores several intermediate files to disk. This includes preprocessed data and models. These will be stored in the example folder.</p> In\u00a0[3]: Copied! <pre>import pathlib\n\ndataset_folder = pathlib.Path(\"example\")\ndataset_folder.mkdir(exist_ok=True)\n</pre> import pathlib  dataset_folder = pathlib.Path(\"example\") dataset_folder.mkdir(exist_ok=True) <p>For this quickstart, we will use a tiny example dataset extracted from the 10X multiome PBMC example data. We'll copy over both the h5ad for the transcriptomics data, and the fragments.tsv for the accessibility data.</p> In\u00a0[5]: Copied! <pre>import pkg_resources\nimport shutil\n\nDATA_PATH = pathlib.Path(\n    pkg_resources.resource_filename(\"chromatinhd\", \"data/examples/pbmc10ktiny/\")\n)\n\n# copy all files from data path to dataset folder\nfor file in DATA_PATH.iterdir():\n    shutil.copy(file, dataset_folder / file.name)\n</pre> import pkg_resources import shutil  DATA_PATH = pathlib.Path(     pkg_resources.resource_filename(\"chromatinhd\", \"data/examples/pbmc10ktiny/\") )  # copy all files from data path to dataset folder for file in DATA_PATH.iterdir():     shutil.copy(file, dataset_folder / file.name) In\u00a0[6]: Copied! <pre>!ls {dataset_folder}\n</pre> !ls {dataset_folder} <pre>fragments.tsv.gz  fragments.tsv.gz.tbi\ttranscriptome.h5ad\n</pre> In\u00a0[7]: Copied! <pre>import scanpy as sc\n\nadata = sc.read(dataset_folder / \"transcriptome.h5ad\")\n</pre> import scanpy as sc  adata = sc.read(dataset_folder / \"transcriptome.h5ad\") In\u00a0[8]: Copied! <pre>transcriptome = chd.data.Transcriptome.from_adata(\n    adata, path=dataset_folder / \"transcriptome\"\n)\n</pre> transcriptome = chd.data.Transcriptome.from_adata(     adata, path=dataset_folder / \"transcriptome\" ) In\u00a0[9]: Copied! <pre>!ls {dataset_folder}/*\n</pre> !ls {dataset_folder}/* <pre>example/fragments.tsv.gz      example/transcriptome.h5ad\nexample/fragments.tsv.gz.tbi\n\nexample/transcriptome:\nadata.pkl  layers  obs.tsv  var.tsv\n</pre> Batch effects <p>       Currently, none of the ChromatinHD models directly supports batch effects, although this will likely be added in the future. If you have batch effects, the current recommended workflow depends on the source of the batch effect:     <ul> <li>If it mainly comes from ambient mRNA, we recommend to use the corrected data. The reason is that this batch effect will likely not be present in the ATAC-seq data.</li> <li>If it mainly comes from biological differences (e.g. cell stress, patient differences, ...), we recommend to use the uncorrected data. The reason is that this batch effect will likely be reflected in the ATAC-seq data as well, given that the genes are truly differentially regulated between the cells.</li> </ul> </p> <p>ChromatinHD defines a set of regions of interest, typically surrounding the one or more transcription start sites of a gene. Given a set of genes from the transcriptomics data and a genome, we can define these regions as follows:</p> <p>We first get the canonical transcripts for each gene.</p> In\u00a0[10]: Copied! <pre>biomart_dataset = chd.biomart.Dataset.from_genome(\"GRCh38\")\ncanonical_transcripts = chd.biomart.get_canonical_transcripts(\n    biomart_dataset, transcriptome.var.index\n)\n</pre> biomart_dataset = chd.biomart.Dataset.from_genome(\"GRCh38\") canonical_transcripts = chd.biomart.get_canonical_transcripts(     biomart_dataset, transcriptome.var.index ) <p>Now we can define the regions around the TSS. In this case we choose -10kb and +10kb around a TSS, although in real situations this will typically be much bigger (e.g. -100kb - +100kb)</p> In\u00a0[11]: Copied! <pre>regions = chd.data.Regions.from_canonical_transcripts(\n    canonical_transcripts,\n    path=dataset_folder / \"regions\",\n    window=[-10000, 10000],\n)\n</pre> regions = chd.data.Regions.from_canonical_transcripts(     canonical_transcripts,     path=dataset_folder / \"regions\",     window=[-10000, 10000], ) In\u00a0[12]: Copied! <pre>!ls -lh {dataset_folder}/*\n</pre> !ls -lh {dataset_folder}/* <pre>-rw-r--r-- 1 wsaelens peak_free_atac 2.0M Aug  4 09:22 example/fragments.tsv.gz\n-rw-r--r-- 1 wsaelens peak_free_atac 4.3K Aug  4 09:22 example/fragments.tsv.gz.tbi\n-rw-r--r-- 1 wsaelens peak_free_atac 2.5M Aug  4 09:22 example/transcriptome.h5ad\n\nexample/regions:\ntotal 8.0K\n-rw-r--r-- 1 wsaelens peak_free_atac 3.4K Aug  4 09:22 coordinates.tsv\n-rw-r--r-- 1 wsaelens peak_free_atac   24 Aug  4 09:22 window.pkl\n\nexample/transcriptome:\ntotal 3.5M\n-rw-r--r-- 1 wsaelens peak_free_atac 2.7M Aug  4 09:22 adata.pkl\ndrwxr-xr-x 2 wsaelens peak_free_atac 4.0K Aug  4 09:22 layers\n-rw-r--r-- 1 wsaelens peak_free_atac 876K Aug  4 09:22 obs.tsv\n-rw-r--r-- 1 wsaelens peak_free_atac 6.1K Aug  4 09:22 var.tsv\n</pre> Gene vs TSS coordinates <p>The coordinates of the canonical transcript often do not correspond to the gene annotation that are used for e.g. RNA-seq analysis. The reason is that gene coordinates are defined based on the largest transcript in both ends.   </p> <p>The fragment file should be indexed.</p> In\u00a0[13]: Copied! <pre>if not (dataset_folder / \"fragments.tsv.gz.tbi\").exists():\n    import subprocess\n\n    subprocess.run(\n        [\n            \"tabix\",\n            dataset_folder / \"fragments.tsv.gz\",\n        ]\n    )\n</pre> if not (dataset_folder / \"fragments.tsv.gz.tbi\").exists():     import subprocess      subprocess.run(         [             \"tabix\",             dataset_folder / \"fragments.tsv.gz\",         ]     ) In\u00a0[14]: Copied! <pre>fragments = chd.data.Fragments.from_fragments_tsv(\n    dataset_folder / \"fragments.tsv.gz\",\n    regions,\n    obs=transcriptome.obs,\n    path=dataset_folder / \"fragments\",\n)\n</pre> fragments = chd.data.Fragments.from_fragments_tsv(     dataset_folder / \"fragments.tsv.gz\",     regions,     obs=transcriptome.obs,     path=dataset_folder / \"fragments\", ) <pre>Processing fragments:   0%|          | 0/50 [00:00&lt;?, ?it/s]</pre> In\u00a0[15]: Copied! <pre>fragments.create_cellxgene_indptr()\n</pre> fragments.create_cellxgene_indptr() In\u00a0[16]: Copied! <pre>!ls {dataset_folder}/*\n</pre> !ls {dataset_folder}/* <pre>example/fragments.tsv.gz      example/transcriptome.h5ad\nexample/fragments.tsv.gz.tbi\n\nexample/fragments:\ncellxgene_indptr.pkl  coordinates.pkl  mapping.pkl  obs.tsv  regions  var.tsv\n\nexample/regions:\ncoordinates.tsv  window.pkl\n\nexample/transcriptome:\nadata.pkl  layers  obs.tsv  var.tsv\n</pre> <p>The final set of data are the training folds that will be used to train - and test - the model. For basic models this is simply done by randomly sampling cells.</p> In\u00a0[26]: Copied! <pre>folds = chd.data.folds.Folds(dataset_folder / \"folds\" / \"5x1\").sample_cells(\n    fragments, 5, 1\n)\n</pre> folds = chd.data.folds.Folds(dataset_folder / \"folds\" / \"5x1\").sample_cells(     fragments, 5, 1 ) <p>Although not needed for every model, for interpretation it can be helpful to store some clustering.</p> In\u00a0[18]: Copied! <pre>clustering = chd.data.Clustering.from_labels(\n    adata.obs[\"celltype\"], path=dataset_folder / \"clustering\"\n)\n</pre> clustering = chd.data.Clustering.from_labels(     adata.obs[\"celltype\"], path=dataset_folder / \"clustering\" ) In\u00a0[19]: Copied! <pre>!ls {clustering.path}\n</pre> !ls {clustering.path} <pre>cluster_info.pkl  labels.pkl\n</pre> This functionality is still under construction and is only used for visualization/interpretation use cases for now. <p>We can also precalculate a motif scan.</p> <p>Let's first download the HOCOMOCO data:</p> In\u00a0[38]: Copied! <pre>motifs_folder = dataset_folder / \"motifs\"\nmotifs_folder.mkdir(exist_ok=True, parents=True)\n\n# download cutoffs, pwms and annotations\n!wget https://hocomoco11.autosome.org/final_bundle/hocomoco11/core/HUMAN/mono/HOCOMOCOv11_core_standard_thresholds_HUMAN_mono.txt -O {motifs_folder}/pwm_cutoffs.txt\n!wget https://hocomoco11.autosome.org/final_bundle/hocomoco11/core/HUMAN/mono/HOCOMOCOv11_core_pwms_HUMAN_mono.txt -O {motifs_folder}/pwms.txt\n!wget https://hocomoco11.autosome.org/final_bundle/hocomoco11/core/HUMAN/mono/HOCOMOCOv11_core_annotation_HUMAN_mono.tsv -O {motifs_folder}/annot.txt\n</pre> motifs_folder = dataset_folder / \"motifs\" motifs_folder.mkdir(exist_ok=True, parents=True)  # download cutoffs, pwms and annotations !wget https://hocomoco11.autosome.org/final_bundle/hocomoco11/core/HUMAN/mono/HOCOMOCOv11_core_standard_thresholds_HUMAN_mono.txt -O {motifs_folder}/pwm_cutoffs.txt !wget https://hocomoco11.autosome.org/final_bundle/hocomoco11/core/HUMAN/mono/HOCOMOCOv11_core_pwms_HUMAN_mono.txt -O {motifs_folder}/pwms.txt !wget https://hocomoco11.autosome.org/final_bundle/hocomoco11/core/HUMAN/mono/HOCOMOCOv11_core_annotation_HUMAN_mono.tsv -O {motifs_folder}/annot.txt <pre>--2023-08-03 16:06:00--  https://hocomoco11.autosome.org/final_bundle/hocomoco11/core/HUMAN/mono/HOCOMOCOv11_core_standard_thresholds_HUMAN_mono.txt\nResolving hocomoco11.autosome.org (hocomoco11.autosome.org)... 188.166.32.228\nConnecting to hocomoco11.autosome.org (hocomoco11.autosome.org)|188.166.32.228|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 22556 (22K) [text/plain]\nSaving to: \u2018example/motifs/pwm_cutoffs.txt\u2019\n\nexample/motifs/pwm_ 100%[===================&gt;]  22.03K  --.-KB/s    in 0s      \n\n2023-08-03 16:06:00 (81.0 MB/s) - \u2018example/motifs/pwm_cutoffs.txt\u2019 saved [22556/22556]\n\n--2023-08-03 16:06:00--  https://hocomoco11.autosome.org/final_bundle/hocomoco11/core/HUMAN/mono/HOCOMOCOv11_core_pwms_HUMAN_mono.txt\nResolving hocomoco11.autosome.org (hocomoco11.autosome.org)... 188.166.32.228\nConnecting to hocomoco11.autosome.org (hocomoco11.autosome.org)|188.166.32.228|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 458211 (447K) [text/plain]\nSaving to: \u2018example/motifs/pwms.txt\u2019\n\nexample/motifs/pwms 100%[===================&gt;] 447.47K  --.-KB/s    in 0.06s   \n\n2023-08-03 16:06:01 (6.90 MB/s) - \u2018example/motifs/pwms.txt\u2019 saved [458211/458211]\n\n--2023-08-03 16:06:01--  https://hocomoco11.autosome.org/final_bundle/hocomoco11/core/HUMAN/mono/HOCOMOCOv11_core_annotation_HUMAN_mono.tsv\nResolving hocomoco11.autosome.org (hocomoco11.autosome.org)... 188.166.32.228\nConnecting to hocomoco11.autosome.org (hocomoco11.autosome.org)|188.166.32.228|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 77641 (76K) [application/octet-stream]\nSaving to: \u2018example/motifs/annot.txt\u2019\n\nexample/motifs/anno 100%[===================&gt;]  75.82K  --.-KB/s    in 0.02s   \n\n2023-08-03 16:06:01 (3.61 MB/s) - \u2018example/motifs/annot.txt\u2019 saved [77641/77641]\n\n</pre> In\u00a0[39]: Copied! <pre>import numpy as np\nimport pandas as pd\n</pre> import numpy as np import pandas as pd In\u00a0[130]: Copied! <pre>pwms = {}\nmotif = None\nfor line in (motifs_folder / \"pwms.txt\").open():\n    if line.startswith(\"&gt;\"):\n        if motif is not None:\n            pwms[motif_id] = motif\n        motif_id = line[1:].strip(\"\\n\")\n        motif = []\n    else:\n        motif.append([float(x) for x in line.split(\"\\t\")])\npwms = {motif_id: np.array(pwm) for motif_id, pwm in pwms.items()}\n</pre> pwms = {} motif = None for line in (motifs_folder / \"pwms.txt\").open():     if line.startswith(\"&gt;\"):         if motif is not None:             pwms[motif_id] = motif         motif_id = line[1:].strip(\"\\n\")         motif = []     else:         motif.append([float(x) for x in line.split(\"\\t\")]) pwms = {motif_id: np.array(pwm) for motif_id, pwm in pwms.items()} In\u00a0[131]: Copied! <pre>motifs = pd.DataFrame({\"motif\": pwms.keys()}).set_index(\"motif\")\nmotif_cutoffs = pd.read_table(\n    motifs_folder / \"pwm_cutoffs.txt\",\n    names=[\"motif\", \"cutoff_001\", \"cutoff_0005\", \"cutoff_0001\"],\n    skiprows=1,\n).set_index(\"motif\")\nmotifs = motifs.join(motif_cutoffs)\nannot = (\n    pd.read_table(motifs_folder / \"annot.txt\")\n    .rename(columns={\"Model\": \"motif\", \"Transcription factor\": \"gene_label\"})\n    .set_index(\"motif\")\n)\nmotifs = motifs.join(annot)\n</pre> motifs = pd.DataFrame({\"motif\": pwms.keys()}).set_index(\"motif\") motif_cutoffs = pd.read_table(     motifs_folder / \"pwm_cutoffs.txt\",     names=[\"motif\", \"cutoff_001\", \"cutoff_0005\", \"cutoff_0001\"],     skiprows=1, ).set_index(\"motif\") motifs = motifs.join(motif_cutoffs) annot = (     pd.read_table(motifs_folder / \"annot.txt\")     .rename(columns={\"Model\": \"motif\", \"Transcription factor\": \"gene_label\"})     .set_index(\"motif\") ) motifs = motifs.join(annot) <p>You also need to provide the location where the genome fasta file is stored. In our case this is located at /data/genome/GRCh38/, which was installed using <code>genomepy.install_genome(\"GRCh38\", genomes_dir = \"/data/genome/\")</code>.</p> In\u00a0[132]: hide-code hide-output Copied! <pre>import genomepy\ngenomepy.install_genome(\"GRCh38\", genomes_dir = \"/data/genome/\")\n</pre> import genomepy genomepy.install_genome(\"GRCh38\", genomes_dir = \"/data/genome/\") Out[132]: <pre>Fasta(\"/data/genome/GRCh38/GRCh38.fa\")</pre> In\u00a0[133]: Copied! <pre>fasta_file = \"/data/genome/GRCh38/GRCh38.fa\"\n</pre> fasta_file = \"/data/genome/GRCh38/GRCh38.fa\" In\u00a0[138]: Copied! <pre>motifscan = chd.data.Motifscan.from_pwms(\n    pwms, regions, motifs = motifs, cutoff_col = \"cutoff_0001\", fasta_file = fasta_file, path=dataset_folder / \"motifscan\", device = \"cuda\",\n)\n</pre> motifscan = chd.data.Motifscan.from_pwms(     pwms, regions, motifs = motifs, cutoff_col = \"cutoff_0001\", fasta_file = fasta_file, path=dataset_folder / \"motifscan\", device = \"cuda\", ) <pre>  0%|          | 0/1 [00:00&lt;?, ?it/s]</pre> <pre>AHR_HUMAN.H11MO.0.B\nAIRE_HUMAN.H11MO.0.C\nALX1_HUMAN.H11MO.0.B\nANDR_HUMAN.H11MO.0.A\nAP2A_HUMAN.H11MO.0.A\nAP2B_HUMAN.H11MO.0.B\nAP2C_HUMAN.H11MO.0.A\nARI5B_HUMAN.H11MO.0.C\nARNT_HUMAN.H11MO.0.B\nASCL1_HUMAN.H11MO.0.A\nATF1_HUMAN.H11MO.0.B\nATF2_HUMAN.H11MO.0.B\nATF3_HUMAN.H11MO.0.A\nATF4_HUMAN.H11MO.0.A\nATF6A_HUMAN.H11MO.0.B\nATOH1_HUMAN.H11MO.0.B\nBACH1_HUMAN.H11MO.0.A\nBACH2_HUMAN.H11MO.0.A\nBATF3_HUMAN.H11MO.0.B\nBATF_HUMAN.H11MO.0.A\nBC11A_HUMAN.H11MO.0.A\nBCL6_HUMAN.H11MO.0.A\nBHA15_HUMAN.H11MO.0.B\nBHE40_HUMAN.H11MO.0.A\nBMAL1_HUMAN.H11MO.0.A\nBRAC_HUMAN.H11MO.0.A\nCDX1_HUMAN.H11MO.0.C\nCDX2_HUMAN.H11MO.0.A\nCEBPA_HUMAN.H11MO.0.A\nCEBPB_HUMAN.H11MO.0.A\nCEBPD_HUMAN.H11MO.0.C\nCEBPE_HUMAN.H11MO.0.A\nCEBPG_HUMAN.H11MO.0.B\nCLOCK_HUMAN.H11MO.0.C\nCOE1_HUMAN.H11MO.0.A\nCOT1_HUMAN.H11MO.0.C\nCOT2_HUMAN.H11MO.0.A\nCREB1_HUMAN.H11MO.0.A\nCREM_HUMAN.H11MO.0.C\nCRX_HUMAN.H11MO.0.B\nCTCFL_HUMAN.H11MO.0.A\nCTCF_HUMAN.H11MO.0.A\nCUX1_HUMAN.H11MO.0.C\nDBP_HUMAN.H11MO.0.B\nDLX3_HUMAN.H11MO.0.C\nDUX4_HUMAN.H11MO.0.A\nE2F1_HUMAN.H11MO.0.A\nE2F2_HUMAN.H11MO.0.B\nE2F3_HUMAN.H11MO.0.A\nE2F4_HUMAN.H11MO.0.A\nE2F5_HUMAN.H11MO.0.B\nE2F6_HUMAN.H11MO.0.A\nE2F7_HUMAN.H11MO.0.B\nEGR1_HUMAN.H11MO.0.A\nEGR2_HUMAN.H11MO.0.A\nEHF_HUMAN.H11MO.0.B\nELF1_HUMAN.H11MO.0.A\nELF2_HUMAN.H11MO.0.C\nELF3_HUMAN.H11MO.0.A\nELF5_HUMAN.H11MO.0.A\nELK1_HUMAN.H11MO.0.B\nELK4_HUMAN.H11MO.0.A\nEPAS1_HUMAN.H11MO.0.B\nERG_HUMAN.H11MO.0.A\nERR1_HUMAN.H11MO.0.A\nERR2_HUMAN.H11MO.0.A\nERR3_HUMAN.H11MO.0.B\nESR1_HUMAN.H11MO.0.A\nESR2_HUMAN.H11MO.0.A\nETS1_HUMAN.H11MO.0.A\nETS2_HUMAN.H11MO.0.B\nETV1_HUMAN.H11MO.0.A\nETV2_HUMAN.H11MO.0.B\nETV4_HUMAN.H11MO.0.B\nETV5_HUMAN.H11MO.0.C\nEVI1_HUMAN.H11MO.0.B\nFEV_HUMAN.H11MO.0.B\nFEZF1_HUMAN.H11MO.0.C\nFLI1_HUMAN.H11MO.0.A\nFOSB_HUMAN.H11MO.0.A\nFOSL1_HUMAN.H11MO.0.A\nFOSL2_HUMAN.H11MO.0.A\nFOS_HUMAN.H11MO.0.A\nFOXA1_HUMAN.H11MO.0.A\nFOXA2_HUMAN.H11MO.0.A\nFOXA3_HUMAN.H11MO.0.B\nFOXC1_HUMAN.H11MO.0.C\nFOXH1_HUMAN.H11MO.0.A\nFOXI1_HUMAN.H11MO.0.B\nFOXJ2_HUMAN.H11MO.0.C\nFOXJ3_HUMAN.H11MO.0.A\nFOXK1_HUMAN.H11MO.0.A\nFOXM1_HUMAN.H11MO.0.A\nFOXO1_HUMAN.H11MO.0.A\nFOXO3_HUMAN.H11MO.0.B\nFOXO4_HUMAN.H11MO.0.C\nFOXP1_HUMAN.H11MO.0.A\nFOXP2_HUMAN.H11MO.0.C\nFOXQ1_HUMAN.H11MO.0.C\nGABPA_HUMAN.H11MO.0.A\nGATA1_HUMAN.H11MO.0.A\nGATA2_HUMAN.H11MO.0.A\nGATA3_HUMAN.H11MO.0.A\nGATA4_HUMAN.H11MO.0.A\nGATA6_HUMAN.H11MO.0.A\nGCR_HUMAN.H11MO.0.A\nGFI1B_HUMAN.H11MO.0.A\nGFI1_HUMAN.H11MO.0.C\nGLI3_HUMAN.H11MO.0.B\nGRHL2_HUMAN.H11MO.0.A\nHEN1_HUMAN.H11MO.0.C\nHIC1_HUMAN.H11MO.0.C\nHIF1A_HUMAN.H11MO.0.C\nHINFP_HUMAN.H11MO.0.C\nHLF_HUMAN.H11MO.0.C\nHNF1A_HUMAN.H11MO.0.C\nHNF1B_HUMAN.H11MO.0.A\nHNF4A_HUMAN.H11MO.0.A\nHNF4G_HUMAN.H11MO.0.B\nHNF6_HUMAN.H11MO.0.B\nHSF1_HUMAN.H11MO.0.A\nHSF2_HUMAN.H11MO.0.A\nHTF4_HUMAN.H11MO.0.A\nHXA10_HUMAN.H11MO.0.C\nHXA13_HUMAN.H11MO.0.C\nHXA1_HUMAN.H11MO.0.C\nHXA9_HUMAN.H11MO.0.B\nHXB13_HUMAN.H11MO.0.A\nHXB4_HUMAN.H11MO.0.B\nHXB7_HUMAN.H11MO.0.C\nHXB8_HUMAN.H11MO.0.C\nHXC9_HUMAN.H11MO.0.C\nIKZF1_HUMAN.H11MO.0.C\nINSM1_HUMAN.H11MO.0.C\nIRF1_HUMAN.H11MO.0.A\nIRF2_HUMAN.H11MO.0.A\nIRF3_HUMAN.H11MO.0.B\nIRF4_HUMAN.H11MO.0.A\nIRF7_HUMAN.H11MO.0.C\nIRF8_HUMAN.H11MO.0.B\nIRF9_HUMAN.H11MO.0.C\nISL1_HUMAN.H11MO.0.A\nITF2_HUMAN.H11MO.0.C\nJUNB_HUMAN.H11MO.0.A\nJUND_HUMAN.H11MO.0.A\nJUN_HUMAN.H11MO.0.A\nKAISO_HUMAN.H11MO.0.A\nKLF12_HUMAN.H11MO.0.C\nKLF15_HUMAN.H11MO.0.A\nKLF1_HUMAN.H11MO.0.A\nKLF3_HUMAN.H11MO.0.B\nKLF4_HUMAN.H11MO.0.A\nKLF5_HUMAN.H11MO.0.A\nKLF6_HUMAN.H11MO.0.A\nKLF8_HUMAN.H11MO.0.C\nKLF9_HUMAN.H11MO.0.C\nLEF1_HUMAN.H11MO.0.A\nLHX2_HUMAN.H11MO.0.A\nLHX3_HUMAN.H11MO.0.C\nLYL1_HUMAN.H11MO.0.A\nMAFB_HUMAN.H11MO.0.B\nMAFF_HUMAN.H11MO.0.B\nMAFG_HUMAN.H11MO.0.A\nMAFK_HUMAN.H11MO.0.A\nMAF_HUMAN.H11MO.0.A\nMAX_HUMAN.H11MO.0.A\nMAZ_HUMAN.H11MO.0.A\nMBD2_HUMAN.H11MO.0.B\nMECP2_HUMAN.H11MO.0.C\nMEF2A_HUMAN.H11MO.0.A\nMEF2B_HUMAN.H11MO.0.A\nMEF2C_HUMAN.H11MO.0.A\nMEF2D_HUMAN.H11MO.0.A\nMEIS1_HUMAN.H11MO.0.A\nMEIS2_HUMAN.H11MO.0.B\nMITF_HUMAN.H11MO.0.A\nMTF1_HUMAN.H11MO.0.C\nMXI1_HUMAN.H11MO.0.A\nMYB_HUMAN.H11MO.0.A\nMYCN_HUMAN.H11MO.0.A\nMYC_HUMAN.H11MO.0.A\nMYF6_HUMAN.H11MO.0.C\nMYOD1_HUMAN.H11MO.0.A\nMYOG_HUMAN.H11MO.0.B\nMZF1_HUMAN.H11MO.0.B\nNANOG_HUMAN.H11MO.0.A\nNDF1_HUMAN.H11MO.0.A\nNDF2_HUMAN.H11MO.0.B\nNF2L1_HUMAN.H11MO.0.C\nNF2L2_HUMAN.H11MO.0.A\nNFAC1_HUMAN.H11MO.0.B\nNFAC2_HUMAN.H11MO.0.B\nNFAC3_HUMAN.H11MO.0.B\nNFAC4_HUMAN.H11MO.0.C\nNFE2_HUMAN.H11MO.0.A\nNFIA_HUMAN.H11MO.0.C\nNFIC_HUMAN.H11MO.0.A\nNFKB1_HUMAN.H11MO.1.B\nNFKB2_HUMAN.H11MO.0.B\nNFYA_HUMAN.H11MO.0.A\nNFYB_HUMAN.H11MO.0.A\nNFYC_HUMAN.H11MO.0.A\nNKX21_HUMAN.H11MO.0.A\nNKX25_HUMAN.H11MO.0.B\nNKX28_HUMAN.H11MO.0.C\nNKX31_HUMAN.H11MO.0.C\nNKX32_HUMAN.H11MO.0.C\nNKX61_HUMAN.H11MO.0.B\nNOBOX_HUMAN.H11MO.0.C\nNR1D1_HUMAN.H11MO.0.B\nNR1H3_HUMAN.H11MO.0.B\nNR1H4_HUMAN.H11MO.0.B\nNR1I2_HUMAN.H11MO.0.C\nNR1I3_HUMAN.H11MO.0.C\nNR2C1_HUMAN.H11MO.0.C\nNR2C2_HUMAN.H11MO.0.B\nNR2E3_HUMAN.H11MO.0.C\nNR4A1_HUMAN.H11MO.0.A\nNR4A2_HUMAN.H11MO.0.C\nNR5A2_HUMAN.H11MO.0.B\nNR6A1_HUMAN.H11MO.0.B\nNRF1_HUMAN.H11MO.0.A\nOLIG2_HUMAN.H11MO.0.B\nOSR2_HUMAN.H11MO.0.C\nOTX2_HUMAN.H11MO.0.A\nOVOL1_HUMAN.H11MO.0.C\nOZF_HUMAN.H11MO.0.C\nP53_HUMAN.H11MO.0.A\nP63_HUMAN.H11MO.0.A\nP73_HUMAN.H11MO.0.A\nPATZ1_HUMAN.H11MO.0.C\nPAX5_HUMAN.H11MO.0.A\nPAX6_HUMAN.H11MO.0.C\nPBX1_HUMAN.H11MO.0.A\nPBX2_HUMAN.H11MO.0.C\nPBX3_HUMAN.H11MO.0.A\nPDX1_HUMAN.H11MO.0.A\nPEBB_HUMAN.H11MO.0.C\nPIT1_HUMAN.H11MO.0.C\nPKNX1_HUMAN.H11MO.0.B\nPO2F1_HUMAN.H11MO.0.C\nPO2F2_HUMAN.H11MO.0.A\nPO3F1_HUMAN.H11MO.0.C\nPO3F2_HUMAN.H11MO.0.A\nPO5F1_HUMAN.H11MO.0.A\nPPARA_HUMAN.H11MO.0.B\nPPARG_HUMAN.H11MO.0.A\nPRD14_HUMAN.H11MO.0.A\nPRDM1_HUMAN.H11MO.0.A\nPRDM6_HUMAN.H11MO.0.C\nPRGR_HUMAN.H11MO.0.A\nPRRX2_HUMAN.H11MO.0.C\nPTF1A_HUMAN.H11MO.0.B\nRARA_HUMAN.H11MO.0.A\nRARG_HUMAN.H11MO.0.B\nRELB_HUMAN.H11MO.0.C\nREL_HUMAN.H11MO.0.B\nREST_HUMAN.H11MO.0.A\nRFX1_HUMAN.H11MO.0.B\nRFX2_HUMAN.H11MO.0.A\nRFX3_HUMAN.H11MO.0.B\nRFX5_HUMAN.H11MO.0.A\nRORA_HUMAN.H11MO.0.C\nRORG_HUMAN.H11MO.0.C\nRUNX1_HUMAN.H11MO.0.A\nRUNX2_HUMAN.H11MO.0.A\nRUNX3_HUMAN.H11MO.0.A\nRXRA_HUMAN.H11MO.0.A\nRXRB_HUMAN.H11MO.0.C\nRXRG_HUMAN.H11MO.0.B\nSALL4_HUMAN.H11MO.0.B\nSIX1_HUMAN.H11MO.0.A\nSIX2_HUMAN.H11MO.0.A\nSMAD2_HUMAN.H11MO.0.A\nSMAD3_HUMAN.H11MO.0.B\nSMAD4_HUMAN.H11MO.0.B\nSMCA1_HUMAN.H11MO.0.C\nSMCA5_HUMAN.H11MO.0.C\nSNAI1_HUMAN.H11MO.0.C\nSNAI2_HUMAN.H11MO.0.A\nSOX10_HUMAN.H11MO.0.B\nSOX17_HUMAN.H11MO.0.C\nSOX2_HUMAN.H11MO.0.A\nSOX3_HUMAN.H11MO.0.B\nSOX4_HUMAN.H11MO.0.B\nSOX5_HUMAN.H11MO.0.C\nSOX9_HUMAN.H11MO.0.B\nSP1_HUMAN.H11MO.0.A\nSP2_HUMAN.H11MO.0.A\nSP3_HUMAN.H11MO.0.B\nSP4_HUMAN.H11MO.0.A\nSPI1_HUMAN.H11MO.0.A\nSPIB_HUMAN.H11MO.0.A\nSRBP1_HUMAN.H11MO.0.A\nSRBP2_HUMAN.H11MO.0.B\nSRF_HUMAN.H11MO.0.A\nSRY_HUMAN.H11MO.0.B\nSTA5A_HUMAN.H11MO.0.A\nSTA5B_HUMAN.H11MO.0.A\nSTAT1_HUMAN.H11MO.0.A\nSTAT2_HUMAN.H11MO.0.A\nSTAT3_HUMAN.H11MO.0.A\nSTAT4_HUMAN.H11MO.0.A\nSTAT6_HUMAN.H11MO.0.B\nSTF1_HUMAN.H11MO.0.B\nSUH_HUMAN.H11MO.0.A\nTAF1_HUMAN.H11MO.0.A\nTAL1_HUMAN.H11MO.0.A\nTBP_HUMAN.H11MO.0.A\nTBX21_HUMAN.H11MO.0.A\nTBX3_HUMAN.H11MO.0.C\nTCF7_HUMAN.H11MO.0.A\nTEAD1_HUMAN.H11MO.0.A\nTEAD4_HUMAN.H11MO.0.A\nTF65_HUMAN.H11MO.0.A\nTF7L1_HUMAN.H11MO.0.B\nTF7L2_HUMAN.H11MO.0.A\nTFAP4_HUMAN.H11MO.0.A\nTFDP1_HUMAN.H11MO.0.C\nTFE2_HUMAN.H11MO.0.A\nTFE3_HUMAN.H11MO.0.B\nTFEB_HUMAN.H11MO.0.C\nTGIF1_HUMAN.H11MO.0.A\nTHA11_HUMAN.H11MO.0.B\nTHAP1_HUMAN.H11MO.0.C\nTHA_HUMAN.H11MO.0.C\nTHB_HUMAN.H11MO.0.C\nTWST1_HUMAN.H11MO.0.A\nTYY1_HUMAN.H11MO.0.A\nUSF1_HUMAN.H11MO.0.A\nUSF2_HUMAN.H11MO.0.A\nVDR_HUMAN.H11MO.0.A\nVEZF1_HUMAN.H11MO.0.C\nWT1_HUMAN.H11MO.0.C\nZ324A_HUMAN.H11MO.0.C\nZ354A_HUMAN.H11MO.0.C\nZBT14_HUMAN.H11MO.0.C\nZBT17_HUMAN.H11MO.0.A\nZBT18_HUMAN.H11MO.0.C\nZBT48_HUMAN.H11MO.0.C\nZBT7A_HUMAN.H11MO.0.A\nZBTB6_HUMAN.H11MO.0.C\nZEB1_HUMAN.H11MO.0.A\nZFP28_HUMAN.H11MO.0.C\nZFP42_HUMAN.H11MO.0.A\nZFP82_HUMAN.H11MO.0.C\nZFX_HUMAN.H11MO.0.A\nZIC1_HUMAN.H11MO.0.B\nZIC3_HUMAN.H11MO.0.B\nZIM3_HUMAN.H11MO.0.C\nZKSC1_HUMAN.H11MO.0.B\nZN121_HUMAN.H11MO.0.C\nZN134_HUMAN.H11MO.0.C\nZN136_HUMAN.H11MO.0.C\nZN140_HUMAN.H11MO.0.C\nZN143_HUMAN.H11MO.0.A\nZN214_HUMAN.H11MO.0.C\nZN250_HUMAN.H11MO.0.C\nZN257_HUMAN.H11MO.0.C\nZN260_HUMAN.H11MO.0.C\nZN263_HUMAN.H11MO.0.A\nZN264_HUMAN.H11MO.0.C\nZN274_HUMAN.H11MO.0.A\nZN281_HUMAN.H11MO.0.A\nZN317_HUMAN.H11MO.0.C\nZN320_HUMAN.H11MO.0.C\nZN322_HUMAN.H11MO.0.B\nZN329_HUMAN.H11MO.0.C\nZN331_HUMAN.H11MO.0.C\nZN335_HUMAN.H11MO.0.A\nZN341_HUMAN.H11MO.0.C\nZN350_HUMAN.H11MO.0.C\nZN382_HUMAN.H11MO.0.C\nZN384_HUMAN.H11MO.0.C\nZN394_HUMAN.H11MO.0.C\nZN418_HUMAN.H11MO.0.C\nZN436_HUMAN.H11MO.0.C\nZN449_HUMAN.H11MO.0.C\nZN467_HUMAN.H11MO.0.C\nZN490_HUMAN.H11MO.0.C\nZN502_HUMAN.H11MO.0.C\nZN528_HUMAN.H11MO.0.C\nZN547_HUMAN.H11MO.0.C\nZN549_HUMAN.H11MO.0.C\nZN554_HUMAN.H11MO.0.C\nZN563_HUMAN.H11MO.0.C\nZN582_HUMAN.H11MO.0.C\nZN586_HUMAN.H11MO.0.C\nZN667_HUMAN.H11MO.0.C\nZN680_HUMAN.H11MO.0.C\nZN708_HUMAN.H11MO.0.C\nZN768_HUMAN.H11MO.0.C\nZN770_HUMAN.H11MO.0.C\nZN816_HUMAN.H11MO.0.C\nZNF18_HUMAN.H11MO.0.C\nZNF41_HUMAN.H11MO.0.C\nZNF76_HUMAN.H11MO.0.C\nZNF85_HUMAN.H11MO.0.C\nZNF8_HUMAN.H11MO.0.C\nZSC22_HUMAN.H11MO.0.C\n</pre> In\u00a0[84]: Copied! <pre>!ls -lh {motifscan.path}\n</pre> !ls -lh {motifscan.path} <pre>total 1.5M\n-rw-r--r-- 1 wsaelens peak_free_atac 279K Aug  3 16:24 indices.pkl\n-rw-r--r-- 1 wsaelens peak_free_atac 377K Aug  3 16:24 indptr.pkl\n-rw-r--r-- 1 wsaelens peak_free_atac  83K Aug  3 16:24 motifs.pkl\n-rw-r--r-- 1 wsaelens peak_free_atac 718K Aug  3 16:24 scores.pkl\n</pre>"},{"location":"quickstart/1_data/#data-preparation","title":"Data preparation\u00b6","text":""},{"location":"quickstart/1_data/#key-data","title":"Key data\u00b6","text":""},{"location":"quickstart/1_data/#transcriptomics","title":"Transcriptomics\u00b6","text":""},{"location":"quickstart/1_data/#regions-of-interest","title":"Regions of interest\u00b6","text":""},{"location":"quickstart/1_data/#atac-seq","title":"ATAC-seq\u00b6","text":"<p>ChromatinHD simply requires a <code>fragments.tsv</code> file. This contains for each fragment its chromosome, start, end and cell barcode.</p> <ul> <li>When using Cellranger, this file will be produced by the pipeline.</li> <li>If you have a bam file, you can use sinto to create the fragment file</li> </ul>"},{"location":"quickstart/1_data/#training-folds","title":"Training folds\u00b6","text":""},{"location":"quickstart/1_data/#optional-data","title":"Optional data\u00b6","text":""},{"location":"quickstart/1_data/#clusters","title":"Clusters\u00b6","text":""},{"location":"quickstart/1_data/#motif-scan","title":"Motif scan\u00b6","text":""},{"location":"quickstart/2_pred/","title":"ChromatinHD-pred","text":"In\u00a0[\u00a0]: hide_output Copied! <pre>import chromatinhd as chd\nimport matplotlib.pyplot as plt\n</pre> import chromatinhd as chd import matplotlib.pyplot as plt <p>ChromatinHD-pred uses accessibility fragments to predict gene expression. As such, it can detect features such as broad or narrow positioning of fragments, or fragment sizes, that are predictive for gene expression.</p> <p>We first load in all the input data which was created in the data preparation tutorial.</p> In\u00a0[221]: Copied! <pre>import pathlib\ndataset_folder = pathlib.Path(\"example\")\nfragments = chd.data.Fragments(dataset_folder / \"fragments\")\ntranscriptome = chd.data.Transcriptome(dataset_folder / \"transcriptome\")\nfolds = chd.data.folds.Folds(dataset_folder / \"folds\" / \"5x1\")\n</pre> import pathlib dataset_folder = pathlib.Path(\"example\") fragments = chd.data.Fragments(dataset_folder / \"fragments\") transcriptome = chd.data.Transcriptome(dataset_folder / \"transcriptome\") folds = chd.data.folds.Folds(dataset_folder / \"folds\" / \"5x1\") <p>The basic ChromatinHD-pred model</p> In\u00a0[222]: Copied! <pre>models = chd.models.pred.model.additive.Models(dataset_folder / \"models\" / \"additive\", reset = True)\n</pre> models = chd.models.pred.model.additive.Models(dataset_folder / \"models\" / \"additive\", reset = True) In\u00a0[\u00a0]: hide_output Copied! <pre>models.train_models(fragments, transcriptome, folds, device = \"cuda\")\n</pre> models.train_models(fragments, transcriptome, folds, device = \"cuda\") <p>We will first check whether the model learned something, by comparing the predictive performance with a baseline</p> In\u00a0[224]: Copied! <pre>gene_cors = models.get_gene_cors(fragments, transcriptome, folds, device = \"cuda\")\ngene_cors[\"symbol\"] = gene_cors.index.map(transcriptome.symbol)\n</pre> gene_cors = models.get_gene_cors(fragments, transcriptome, folds, device = \"cuda\") gene_cors[\"symbol\"] = gene_cors.index.map(transcriptome.symbol) In\u00a0[225]: Copied! <pre>gene_cors.sort_values(\"deltacor\", ascending = False).head(10)\n</pre> gene_cors.sort_values(\"deltacor\", ascending = False).head(10) Out[225]: cor_predicted cor_n_fragments n_fragments deltacor symbol gene ENSG00000100721 0.458880 0.135177 41.2 0.323703 TCL1A ENSG00000169429 0.475118 0.169594 330.6 0.305523 CXCL8 ENSG00000185666 0.302153 0.029521 22.2 0.272632 SYN3 ENSG00000143297 0.312124 0.039584 37.8 0.272540 FCRL5 ENSG00000239264 0.332108 0.070291 286.0 0.261817 TXNDC5 ENSG00000105369 0.532800 0.283968 1820.6 0.248832 CD79A ENSG00000221866 0.307623 0.074430 89.8 0.233193 PLXNA4 ENSG00000173068 0.373886 0.152450 81.6 0.221436 BNC2 ENSG00000156738 0.622245 0.402413 204.6 0.219832 MS4A1 ENSG00000012124 0.610037 0.396753 465.8 0.213284 CD22 In\u00a0[226]: Copied! <pre>import pandas as pd\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize = (4, 4))\n\nfor name, group in gene_cors.iterrows():\n    ax.plot([0, 1], group[[\"cor_n_fragments\", \"cor_predicted\"]], color = \"#3338\", zorder = 0, marker = \"o\", markersize = 2)\nax.boxplot(gene_cors[[\"cor_n_fragments\", \"cor_predicted\"]].values, positions = [0, 1], widths = 0.1, showfliers = False, showmeans = True, meanline = True, meanprops = {\"color\": \"red\", \"linewidth\": 2})\nax.set_xticks([0, 1])\nax.set_xticklabels([\"# fragments\", \"ChromatinHD-pred\"])\nax.set_ylabel(\"$cor$\")\n;\n</pre> import pandas as pd import matplotlib.pyplot as plt  fig, ax = plt.subplots(figsize = (4, 4))  for name, group in gene_cors.iterrows():     ax.plot([0, 1], group[[\"cor_n_fragments\", \"cor_predicted\"]], color = \"#3338\", zorder = 0, marker = \"o\", markersize = 2) ax.boxplot(gene_cors[[\"cor_n_fragments\", \"cor_predicted\"]].values, positions = [0, 1], widths = 0.1, showfliers = False, showmeans = True, meanline = True, meanprops = {\"color\": \"red\", \"linewidth\": 2}) ax.set_xticks([0, 1]) ax.set_xticklabels([\"# fragments\", \"ChromatinHD-pred\"]) ax.set_ylabel(\"$cor$\") ; Out[226]: <pre>''</pre> <p>Note that every gene gains from the ChromatinHD model, even if some only gain a little. The genes with a low $\\Delta cor$ are often those with only a few fragments:</p> In\u00a0[227]: Copied! <pre>fig, ax = plt.subplots(figsize = (4, 4))\nax.scatter(gene_cors[\"n_fragments\"], gene_cors[\"deltacor\"])\nax.set_ylabel(\"$\\\\Delta$ cor\")\nax.set_xlabel(\"# fragments\")\nax.set_xscale(\"log\")\n</pre> fig, ax = plt.subplots(figsize = (4, 4)) ax.scatter(gene_cors[\"n_fragments\"], gene_cors[\"deltacor\"]) ax.set_ylabel(\"$\\\\Delta$ cor\") ax.set_xlabel(\"# fragments\") ax.set_xscale(\"log\") <p>To determine which regions were important for the model to predict gene expression, we will censor fragments from windows of various sizes, and then check whether the model performance on a set of test cells decreased. This functionality is implemented in the <code>GeneMultiWindow</code> class. This will only run the censoring for a subset of genes to speed up interpretation.</p> In\u00a0[228]: Copied! <pre>censorer = chd.models.pred.interpret.MultiWindowCensorer(fragments.regions.window)\ngenemultiwindow = chd.models.pred.interpret.GeneMultiWindow(\n    models.path / \"interpret\" / \"genemultiwindow\"\n)\n</pre> censorer = chd.models.pred.interpret.MultiWindowCensorer(fragments.regions.window) genemultiwindow = chd.models.pred.interpret.GeneMultiWindow(     models.path / \"interpret\" / \"genemultiwindow\" ) In\u00a0[229]: Copied! <pre>genemultiwindow.score(\n    fragments,\n    transcriptome,\n    models,\n    folds,\n    transcriptome.gene_id(\n        [\n            \"CCL4\",\n            \"IL1B\",\n            \"EBF1\",\n            \"PAX5\",\n            \"CD79A\",\n            \"RHEX\",\n        ]\n    ),\n    censorer=censorer,\n)\n</pre> genemultiwindow.score(     fragments,     transcriptome,     models,     folds,     transcriptome.gene_id(         [             \"CCL4\",             \"IL1B\",             \"EBF1\",             \"PAX5\",             \"CD79A\",             \"RHEX\",         ]     ),     censorer=censorer, ) <pre>  0%|          | 0/6 [00:00&lt;?, ?it/s]</pre> In\u00a0[230]: Copied! <pre>genemultiwindow.interpolate()\n</pre> genemultiwindow.interpolate() <pre>  0%|          | 0/6 [00:00&lt;?, ?it/s]</pre> In\u00a0[231]: Copied! <pre>symbol = \"EBF1\"\n\nfig = chd.grid.Figure(chd.grid.Grid(padding_height=0.05))\nwidth = 10\n\nregion = fragments.regions.coordinates.loc[transcriptome.gene_id(symbol)]\npanel_genes = chd.plot.genome.genes.Genes.from_region(region, width=width)\nfig.main.add_under(panel_genes)\n\npanel_pileup = chd.models.pred.plot.Pileup.from_genemultiwindow(\n    genemultiwindow, transcriptome.gene_id(symbol), width=width\n)\nfig.main.add_under(panel_pileup)\n\npanel_predictivity = chd.models.pred.plot.Predictivity.from_genemultiwindow(\n    genemultiwindow, transcriptome.gene_id(symbol), width=width\n)\nfig.main.add_under(panel_predictivity)\n\nfig.plot()\n</pre> symbol = \"EBF1\"  fig = chd.grid.Figure(chd.grid.Grid(padding_height=0.05)) width = 10  region = fragments.regions.coordinates.loc[transcriptome.gene_id(symbol)] panel_genes = chd.plot.genome.genes.Genes.from_region(region, width=width) fig.main.add_under(panel_genes)  panel_pileup = chd.models.pred.plot.Pileup.from_genemultiwindow(     genemultiwindow, transcriptome.gene_id(symbol), width=width ) fig.main.add_under(panel_pileup)  panel_predictivity = chd.models.pred.plot.Predictivity.from_genemultiwindow(     genemultiwindow, transcriptome.gene_id(symbol), width=width ) fig.main.add_under(panel_predictivity)  fig.plot() <p>In a similar fashion we can determine the co-predictivity per position.</p> In\u00a0[216]: Copied! <pre>censorer = chd.models.pred.interpret.WindowCensorer(fragments.regions.window)\ngenepairwindow = chd.models.pred.interpret.GenePairWindow(\n    models.path / \"interpret\" / \"genepairwindow\", reset = True\n)\ngenepairwindow.score(fragments, transcriptome, models, folds, censorer = censorer, genes = transcriptome.gene_id([\"CCL4\"]))\n</pre> censorer = chd.models.pred.interpret.WindowCensorer(fragments.regions.window) genepairwindow = chd.models.pred.interpret.GenePairWindow(     models.path / \"interpret\" / \"genepairwindow\", reset = True ) genepairwindow.score(fragments, transcriptome, models, folds, censorer = censorer, genes = transcriptome.gene_id([\"CCL4\"])) <pre>  0%|          | 0/1 [00:00&lt;?, ?it/s]</pre> <pre>(5, 200, 200)\n</pre> In\u00a0[217]: Copied! <pre>symbol = \"CCL4\"\n\nfig = chd.grid.Figure(chd.grid.Grid(padding_height=0.05))\nwidth = 10\n\n# genes\nregion = fragments.regions.coordinates.loc[transcriptome.gene_id(symbol)]\npanel_genes = chd.plot.genome.genes.Genes.from_region(region, width=width)\nfig.main.add_under(panel_genes)\n\n# pileup\npanel_pileup = chd.models.pred.plot.Pileup.from_genemultiwindow(\n    genemultiwindow, transcriptome.gene_id(symbol), width=width\n)\nfig.main.add_under(panel_pileup)\n\n# predictivity\npanel_predictivity = chd.models.pred.plot.Predictivity.from_genemultiwindow(\n    genemultiwindow, transcriptome.gene_id(symbol), width=width\n)\nfig.main.add_under(panel_predictivity)\n\n# copredictivity\npanel_copredictivity = chd.models.pred.plot.Copredictivity.from_genepairwindow(\n    genepairwindow, transcriptome.gene_id(symbol), width=width\n)\nfig.main.add_under(panel_copredictivity)\n\nfig.plot()\n</pre> symbol = \"CCL4\"  fig = chd.grid.Figure(chd.grid.Grid(padding_height=0.05)) width = 10  # genes region = fragments.regions.coordinates.loc[transcriptome.gene_id(symbol)] panel_genes = chd.plot.genome.genes.Genes.from_region(region, width=width) fig.main.add_under(panel_genes)  # pileup panel_pileup = chd.models.pred.plot.Pileup.from_genemultiwindow(     genemultiwindow, transcriptome.gene_id(symbol), width=width ) fig.main.add_under(panel_pileup)  # predictivity panel_predictivity = chd.models.pred.plot.Predictivity.from_genemultiwindow(     genemultiwindow, transcriptome.gene_id(symbol), width=width ) fig.main.add_under(panel_predictivity)  # copredictivity panel_copredictivity = chd.models.pred.plot.Copredictivity.from_genepairwindow(     genepairwindow, transcriptome.gene_id(symbol), width=width ) fig.main.add_under(panel_copredictivity)  fig.plot() In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"quickstart/2_pred/#chromatinhd-pred","title":"ChromatinHD-pred\u00b6","text":""},{"location":"quickstart/2_pred/#train-the-models","title":"Train the models\u00b6","text":""},{"location":"quickstart/2_pred/#some-quality-checks","title":"Some quality checks\u00b6","text":""},{"location":"quickstart/2_pred/#predictivity-per-position","title":"Predictivity per position\u00b6","text":""},{"location":"quickstart/2_pred/#co-predictivity-per-position","title":"Co-predictivity per position\u00b6","text":""},{"location":"quickstart/3_diff/","title":"ChromatinHD-diff","text":"In\u00a0[\u00a0]: hide_output Copied! <pre>import chromatinhd as chd\nimport matplotlib.pyplot as plt\n</pre> import chromatinhd as chd import matplotlib.pyplot as plt <p>ChromatinHD-pred uses accessibility fragments to predict gene expression. As such, it can detect features such as broad or narrow positioning of fragments, or fragment sizes, that are predictive for gene expression.</p> <p>We first load in all the input data which was created in the data preparation tutorial.</p> In\u00a0[4]: Copied! <pre>import pathlib\ndataset_folder = pathlib.Path(\"example\")\nfragments = chd.data.Fragments(dataset_folder / \"fragments\")\ntranscriptome = chd.data.Transcriptome(dataset_folder / \"transcriptome\")\nfolds = chd.data.folds.Folds(dataset_folder / \"folds\" / \"5x1\")\nclustering = chd.data.Clustering(dataset_folder / \"clustering\")\n</pre> import pathlib dataset_folder = pathlib.Path(\"example\") fragments = chd.data.Fragments(dataset_folder / \"fragments\") transcriptome = chd.data.Transcriptome(dataset_folder / \"transcriptome\") folds = chd.data.folds.Folds(dataset_folder / \"folds\" / \"5x1\") clustering = chd.data.Clustering(dataset_folder / \"clustering\") <p>The basic ChromatinHD-diff model</p> In\u00a0[7]: Copied! <pre>models = chd.models.diff.model.cutnf.Models(dataset_folder / \"models\" / \"cutnf\", reset = True)\n</pre> models = chd.models.diff.model.cutnf.Models(dataset_folder / \"models\" / \"cutnf\", reset = True) In\u00a0[\u00a0]: hide_output Copied! <pre>models.train_models(fragments, clustering, folds, device = \"cuda\", n_epochs = 10, nbins = (256, 128, 64, 32))\n</pre> models.train_models(fragments, clustering, folds, device = \"cuda\", n_epochs = 10, nbins = (256, 128, 64, 32)) <p>Currently, the ChromatinHD-model is purely positional, i.e. it only looks whether Tn5 insertion sites increase or decrease within a region. As such, we can only interpret it positionally:</p> In\u00a0[10]: Copied! <pre>import chromatinhd.models.diff.interpret.genepositional\n</pre> import chromatinhd.models.diff.interpret.genepositional In\u00a0[11]: Copied! <pre>genepositional = chromatinhd.models.diff.interpret.genepositional.GenePositional(\n    path=models.path / \"interpret\" / \"genepositional\"\n)\ngenepositional.score(\n    fragments,\n    clustering,\n    models,\n    force=True,\n)\n</pre> genepositional = chromatinhd.models.diff.interpret.genepositional.GenePositional(     path=models.path / \"interpret\" / \"genepositional\" ) genepositional.score(     fragments,     clustering,     models,     force=True, ) <pre>  0%|          | 0/50 [00:00&lt;?, ?it/s]</pre> In\u00a0[15]: Copied! <pre>symbol = \"EBF1\"\n\nfig = chd.grid.Figure(chd.grid.Grid(padding_height=0.05, padding_width=0.05))\nwidth = 10\n\nregion = fragments.regions.coordinates.loc[transcriptome.gene_id(symbol)]\npanel_genes = chd.plot.genome.genes.Genes.from_region(region, width=width)\nfig.main.add_under(panel_genes)\n\nplotdata, plotdata_mean = genepositional.get_plotdata(transcriptome.gene_id(symbol))\npanel_differential = chd.models.diff.plot.Differential(\n    plotdata, plotdata_mean, cluster_info = clustering.cluster_info, panel_height = 0.5, width=width\n)\nfig.main.add_under(panel_differential)\n\npanel_expression = chd.models.diff.plot.DifferentialExpression.from_transcriptome(\n    transcriptome = transcriptome, clustering = clustering, gene = transcriptome.gene_id(symbol), panel_height = 0.5\n)\nfig.main.add_right(panel_expression, row = panel_differential)\n\nfig.plot()\n</pre> symbol = \"EBF1\"  fig = chd.grid.Figure(chd.grid.Grid(padding_height=0.05, padding_width=0.05)) width = 10  region = fragments.regions.coordinates.loc[transcriptome.gene_id(symbol)] panel_genes = chd.plot.genome.genes.Genes.from_region(region, width=width) fig.main.add_under(panel_genes)  plotdata, plotdata_mean = genepositional.get_plotdata(transcriptome.gene_id(symbol)) panel_differential = chd.models.diff.plot.Differential(     plotdata, plotdata_mean, cluster_info = clustering.cluster_info, panel_height = 0.5, width=width ) fig.main.add_under(panel_differential)  panel_expression = chd.models.diff.plot.DifferentialExpression.from_transcriptome(     transcriptome = transcriptome, clustering = clustering, gene = transcriptome.gene_id(symbol), panel_height = 0.5 ) fig.main.add_right(panel_expression, row = panel_differential)  fig.plot() In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"quickstart/3_diff/#chromatinhd-diff","title":"ChromatinHD-diff\u00b6","text":""},{"location":"quickstart/3_diff/#train-the-models","title":"Train the models\u00b6","text":""},{"location":"quickstart/3_diff/#interpret-positionally","title":"Interpret positionally\u00b6","text":""},{"location":"reference/data/clustering/","title":"Clustering","text":""},{"location":"reference/data/clustering/#chromatinhd.data.clustering.Clustering","title":"<code>chromatinhd.data.clustering.Clustering</code>","text":"<p>         Bases: <code>Flow</code></p> Source code in <code>src/chromatinhd/data/clustering/clustering.py</code> <pre><code>class Clustering(Flow):\n    labels = Stored(\"labels\")\n    \"Labels for each cell.\"\n\n    cluster_info = StoredDataFrame(\"cluster_info\")\n    \"Dataframe containing information for each cluster, such as a label.\"\n\n    @classmethod\n    def from_labels(cls, labels, path):\n        clustering = cls(path)\n        if not isinstance(labels, pd.Series):\n            labels = pd.Series(labels).astype(\"category\")\n        clustering.labels = labels\n        clustering.cluster_info = (\n            pd.DataFrame(\n                {\n                    \"cluster\": labels.unique(),\n                    \"n_cells\": labels.value_counts(),\n                    \"label\": labels.unique(),\n                }\n            )\n            .set_index(\"cluster\")\n            .loc[labels.cat.categories]\n        )\n        return clustering\n\n    @property\n    def n_clusters(self):\n        return len(self.labels.unique())\n</code></pre>"},{"location":"reference/data/clustering/#chromatinhd.data.clustering.clustering.Clustering.cluster_info","title":"<code>cluster_info = StoredDataFrame('cluster_info')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Dataframe containing information for each cluster, such as a label.</p>"},{"location":"reference/data/clustering/#chromatinhd.data.clustering.clustering.Clustering.labels","title":"<code>labels = Stored('labels')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Labels for each cell.</p>"},{"location":"reference/data/folds/","title":"Folds","text":""},{"location":"reference/data/folds/#chromatinhd.data.folds.Folds","title":"<code>chromatinhd.data.folds.Folds</code>","text":"<p>         Bases: <code>Flow</code></p> <p>Folds of multiple cell and gene combinations</p> Source code in <code>src/chromatinhd/data/folds/folds.py</code> <pre><code>class Folds(Flow):\n\"\"\"\n    Folds of multiple cell and gene combinations\n    \"\"\"\n\n    folds: dict = Stored(\"folds\")\n\"\"\"The folds\"\"\"\n\n    def sample_cells(\n        self,\n        fragments: Fragments,\n        n_folds: int,\n        n_repeats: int = 1,\n        overwrite: bool = False,\n    ):\n\"\"\"\n        Sample cells and genes into folds\n\n        Parameters:\n            fragments:\n                the fragments\n            n_folds:\n                the number of folds\n            n_repeats:\n                the number of repeats\n            overwrite:\n                whether to overwrite existing folds\n        \"\"\"\n        if not overwrite and self.get(\"folds\").exists(self):\n            return\n\n        folds = []\n\n        for repeat_ix in range(n_repeats):\n            generator = np.random.RandomState(repeat_ix)\n\n            cells_all = generator.permutation(fragments.n_cells)\n\n            cell_bins = np.floor(\n                (np.arange(len(cells_all)) / (len(cells_all) / n_folds))\n            )\n\n            for i in range(n_folds):\n                cells_train = cells_all[cell_bins != i]\n                cells_validation_test = cells_all[cell_bins == i]\n                cells_validation = cells_validation_test[\n                    : (len(cells_validation_test) // 2)\n                ]\n                cells_test = cells_validation_test[(len(cells_validation_test) // 2) :]\n\n                folds.append(\n                    {\n                        \"cells_train\": cells_train,\n                        \"cells_validation\": cells_validation,\n                        \"cells_test\": cells_test,\n                        \"repeat\": repeat_ix,\n                    }\n                )\n        self.folds = folds\n\n    def sample_cellxgene(\n        self,\n        fragments: Fragments,\n        n_folds: int,\n        n_repeats: int = 1,\n        overwrite: bool = False,\n    ):\n\"\"\"\n        Sample cells and genes into folds\n\n        Parameters:\n            fragments:\n                the fragments\n            n_folds:\n                the number of folds\n            n_repeats:\n                the number of repeats\n            overwrite:\n                whether to overwrite existing folds\n        \"\"\"\n        if not overwrite and self.get(\"folds\").exists(self):\n            return\n\n        folds = []\n\n        for repeat_ix in range(n_repeats):\n            generator = np.random.RandomState(repeat_ix)\n\n            cells_all = generator.permutation(fragments.n_cells)\n\n            cell_bins = np.floor(\n                (np.arange(len(cells_all)) / (len(cells_all) / n_folds))\n            )\n\n            genes_all = np.arange(fragments.n_genes)\n\n            chr_order = generator.permutation(\n                fragments.regions.coordinates[\"chr\"].unique()\n            )\n            gene_chrs = pd.Categorical(\n                fragments.regions.coordinates[\"chr\"].astype(str), categories=chr_order\n            ).codes\n            gene_bins = np.floor((gene_chrs / (len(chr_order) / n_folds))).astype(int)\n\n            for i in range(n_folds):\n                cells_train = cells_all[cell_bins != i]\n                cells_validation_test = cells_all[cell_bins == i]\n                cells_validation = cells_validation_test[\n                    : (len(cells_validation_test) // 2)\n                ]\n                cells_test = cells_validation_test[(len(cells_validation_test) // 2) :]\n\n                genes_train = genes_all[gene_bins != i]\n                genes_validation_test = genes_all[gene_bins == i]\n                genes_validation = genes_validation_test[\n                    : (len(genes_validation_test) // 2)\n                ]\n                genes_test = genes_validation_test[(len(genes_validation_test) // 2) :]\n\n                folds.append(\n                    {\n                        \"cells_train\": cells_train,\n                        \"cells_validation\": cells_validation,\n                        \"cells_test\": cells_test,\n                        \"genes_train\": genes_train,\n                        \"genes_validation\": genes_validation,\n                        \"genes_test\": genes_test,\n                        \"repeat\": repeat_ix,\n                    }\n                )\n        self.folds = folds\n\n    def __getitem__(self, ix):\n        return self.folds[ix]\n\n    def __len__(self):\n        return len(self.folds)\n</code></pre>"},{"location":"reference/data/folds/#chromatinhd.data.folds.folds.Folds.folds","title":"<code>folds: dict = Stored('folds')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The folds</p>"},{"location":"reference/data/folds/#chromatinhd.data.folds.folds.Folds.sample_cells","title":"<code>sample_cells(fragments, n_folds, n_repeats=1, overwrite=False)</code>","text":"<p>Sample cells and genes into folds</p> <p>Parameters:</p> Name Type Description Default <code>fragments</code> <code>Fragments</code> <p>the fragments</p> required <code>n_folds</code> <code>int</code> <p>the number of folds</p> required <code>n_repeats</code> <code>int</code> <p>the number of repeats</p> <code>1</code> <code>overwrite</code> <code>bool</code> <p>whether to overwrite existing folds</p> <code>False</code> Source code in <code>src/chromatinhd/data/folds/folds.py</code> <pre><code>def sample_cells(\n    self,\n    fragments: Fragments,\n    n_folds: int,\n    n_repeats: int = 1,\n    overwrite: bool = False,\n):\n\"\"\"\n    Sample cells and genes into folds\n\n    Parameters:\n        fragments:\n            the fragments\n        n_folds:\n            the number of folds\n        n_repeats:\n            the number of repeats\n        overwrite:\n            whether to overwrite existing folds\n    \"\"\"\n    if not overwrite and self.get(\"folds\").exists(self):\n        return\n\n    folds = []\n\n    for repeat_ix in range(n_repeats):\n        generator = np.random.RandomState(repeat_ix)\n\n        cells_all = generator.permutation(fragments.n_cells)\n\n        cell_bins = np.floor(\n            (np.arange(len(cells_all)) / (len(cells_all) / n_folds))\n        )\n\n        for i in range(n_folds):\n            cells_train = cells_all[cell_bins != i]\n            cells_validation_test = cells_all[cell_bins == i]\n            cells_validation = cells_validation_test[\n                : (len(cells_validation_test) // 2)\n            ]\n            cells_test = cells_validation_test[(len(cells_validation_test) // 2) :]\n\n            folds.append(\n                {\n                    \"cells_train\": cells_train,\n                    \"cells_validation\": cells_validation,\n                    \"cells_test\": cells_test,\n                    \"repeat\": repeat_ix,\n                }\n            )\n    self.folds = folds\n</code></pre>"},{"location":"reference/data/folds/#chromatinhd.data.folds.folds.Folds.sample_cellxgene","title":"<code>sample_cellxgene(fragments, n_folds, n_repeats=1, overwrite=False)</code>","text":"<p>Sample cells and genes into folds</p> <p>Parameters:</p> Name Type Description Default <code>fragments</code> <code>Fragments</code> <p>the fragments</p> required <code>n_folds</code> <code>int</code> <p>the number of folds</p> required <code>n_repeats</code> <code>int</code> <p>the number of repeats</p> <code>1</code> <code>overwrite</code> <code>bool</code> <p>whether to overwrite existing folds</p> <code>False</code> Source code in <code>src/chromatinhd/data/folds/folds.py</code> <pre><code>def sample_cellxgene(\n    self,\n    fragments: Fragments,\n    n_folds: int,\n    n_repeats: int = 1,\n    overwrite: bool = False,\n):\n\"\"\"\n    Sample cells and genes into folds\n\n    Parameters:\n        fragments:\n            the fragments\n        n_folds:\n            the number of folds\n        n_repeats:\n            the number of repeats\n        overwrite:\n            whether to overwrite existing folds\n    \"\"\"\n    if not overwrite and self.get(\"folds\").exists(self):\n        return\n\n    folds = []\n\n    for repeat_ix in range(n_repeats):\n        generator = np.random.RandomState(repeat_ix)\n\n        cells_all = generator.permutation(fragments.n_cells)\n\n        cell_bins = np.floor(\n            (np.arange(len(cells_all)) / (len(cells_all) / n_folds))\n        )\n\n        genes_all = np.arange(fragments.n_genes)\n\n        chr_order = generator.permutation(\n            fragments.regions.coordinates[\"chr\"].unique()\n        )\n        gene_chrs = pd.Categorical(\n            fragments.regions.coordinates[\"chr\"].astype(str), categories=chr_order\n        ).codes\n        gene_bins = np.floor((gene_chrs / (len(chr_order) / n_folds))).astype(int)\n\n        for i in range(n_folds):\n            cells_train = cells_all[cell_bins != i]\n            cells_validation_test = cells_all[cell_bins == i]\n            cells_validation = cells_validation_test[\n                : (len(cells_validation_test) // 2)\n            ]\n            cells_test = cells_validation_test[(len(cells_validation_test) // 2) :]\n\n            genes_train = genes_all[gene_bins != i]\n            genes_validation_test = genes_all[gene_bins == i]\n            genes_validation = genes_validation_test[\n                : (len(genes_validation_test) // 2)\n            ]\n            genes_test = genes_validation_test[(len(genes_validation_test) // 2) :]\n\n            folds.append(\n                {\n                    \"cells_train\": cells_train,\n                    \"cells_validation\": cells_validation,\n                    \"cells_test\": cells_test,\n                    \"genes_train\": genes_train,\n                    \"genes_validation\": genes_validation,\n                    \"genes_test\": genes_test,\n                    \"repeat\": repeat_ix,\n                }\n            )\n    self.folds = folds\n</code></pre>"},{"location":"reference/data/fragments/","title":"Fragments","text":""},{"location":"reference/data/fragments/#chromatinhd.data.fragments.Fragments","title":"<code>chromatinhd.data.fragments.Fragments</code>","text":"<p>         Bases: <code>Flow</code></p> <p>Fragments centered around a gene window</p> Source code in <code>src/chromatinhd/data/fragments/fragments.py</code> <pre><code>class Fragments(Flow):\n\"\"\"Fragments centered around a gene window\"\"\"\n\n    regions = Linked(\"regions\")\n\"\"\"Regions in which fragments are stored\"\"\"\n\n    coordinates: torch.Tensor = StoredTorchInt64(\"coordinates\")\n\"\"\"Coordinates of the two cut sites.\"\"\"\n\n    mapping: torch.Tensor = StoredTorchInt64(\"mapping\")\n\"\"\"Mapping of a fragment to a gene and a cell\"\"\"\n\n    cellxgene_indptr: torch.Tensor = StoredTorchInt64(\"cellxgene_indptr\")\n\"\"\"Index pointers for each cellxgene combination\"\"\"\n\n    regions: pd.DataFrame = Linked(\"regions\")\n\"\"\"Dataframe containing chromosome, start, end and strand of each region\"\"\"\n\n    def create_cellxgene_indptr(self):\n        cellxgene = self.mapping[:, 0] * self.n_genes + self.mapping[:, 1]\n\n        if not (cellxgene.diff() &gt;= 0).all():\n            raise ValueError(\n                \"Fragments should be ordered by cell then gene (ascending)\"\n            )\n\n        n_cellxgene = self.n_genes * self.n_cells\n        cellxgene_indptr = torch.nn.functional.pad(\n            torch.cumsum(torch.bincount(cellxgene, minlength=n_cellxgene), 0), (1, 0)\n        )\n        assert self.coordinates.shape[0] == cellxgene_indptr[-1]\n        if not (cellxgene_indptr.diff() &gt;= 0).all():\n            raise ValueError(\n                \"Fragments should be ordered by cell then gene (ascending)\"\n            )\n        self.cellxgene_indptr = cellxgene_indptr\n\n    _genemapping = None\n\n    @property\n    def genemapping(self):\n        if self._genemapping is None:\n            self._genemapping = self.mapping[:, 1].contiguous()\n        return self._genemapping\n\n    _cellmapping = None\n\n    @property\n    def cellmapping(self):\n        if self._cellmapping is None:\n            self._cellmapping = self.mapping[:, 0].contiguous()\n        return self._cellmapping\n\n    var = TSV(\"var\")\n\"\"\"DataFrame containing information about regions.\"\"\"\n\n    obs = TSV(\"obs\")\n\"\"\"DataFrame containing information about cells.\"\"\"\n\n    _n_genes = None\n\n    @property\n    def n_genes(self):\n        if self._n_genes is None:\n            self._n_genes = self.var.shape[0]\n        return self._n_genes\n\n    _n_cells = None\n\n    @property\n    def n_cells(self):\n        if self._n_cells is None:\n            self._n_cells = self.obs.shape[0]\n        return self._n_cells\n\n    @property\n    def local_cellxgene_ix(self):\n        return self.cellmapping * self.n_genes + self.genemapping\n\n    def estimate_fragment_per_cellxgene(self):\n        return math.ceil(self.coordinates.shape[0] / self.n_cells / self.n_genes * 2)\n\n    # def create_cut_data(self):\n    #     cut_coordinates = self.coordinates.flatten()\n    #     cut_coordinates = (cut_coordinates - self.window[0]) / (\n    #         self.window[1] - self.window[0]\n    #     )\n    #     keep_cuts = (cut_coordinates &gt;= 0) &amp; (cut_coordinates &lt;= 1)\n    #     cut_coordinates = cut_coordinates[keep_cuts]\n\n    #     self.cut_coordinates = cut_coordinates\n\n    #     self.cut_local_gene_ix = self.genemapping.expand(2, -1).T.flatten()[keep_cuts]\n    #     self.cut_local_cell_ix = self.cellmapping.expand(2, -1).T.flatten()[keep_cuts]\n\n    @property\n    def genes_oi_torch(self):\n        return torch.from_numpy(self.genes_oi).to(self.coordinates.device)\n\n    @property\n    def cells_oi_torch(self):\n        return torch.from_numpy(self.genes_oi).to(self.coordinates.device)\n\n    @classmethod\n    def from_fragments_tsv(\n        cls,\n        fragments_file: Union[pathlib.Path, str],\n        regions: Regions,\n        obs: pd.DataFrame,\n        path: Union[pathlib.Path, str],\n        cell_column: str = None,\n        overwrite: bool = True,\n    ):\n\"\"\"\n        Create a Fragments object from a fragments tsv file\n\n        Parameters:\n            fragments_file:\n                Location of the `fragments.tsv` file created by e.g. CellRanger or sinto\n            obs:\n                DataFrame containing information about cells. The index should be the cell names as present in the fragments file. If not, you can specify the column name using the `cell_column` argument.\n            path:\n                Folder in which the fragments data will be stored\n            regions:\n                Regions object\n            cell_column (optional):\n                Column name in the `obs` DataFrame containing the cell names. If not specified, the index of the `obs` DataFrame is used.\n            overwrite (optional):\n                Whether to overwrite the data if it already exists\n        \"\"\"\n\n        if isinstance(fragments_file, str):\n            fragments_file = pathlib.Path(fragments_file)\n        if isinstance(path, str):\n            path = pathlib.Path(path)\n        if not fragments_file.exists():\n            raise FileNotFoundError(f\"File {fragments_file} does not exist\")\n        if not overwrite and path.exists():\n            raise FileExistsError(f\"Folder {path} already exists\")\n        path.mkdir(parents=True, exist_ok=True)\n\n        # regions information\n        var = pd.DataFrame(index=regions.coordinates.index)\n        var[\"ix\"] = np.arange(var.shape[0])\n\n        # cell information\n        obs[\"ix\"] = np.arange(obs.shape[0])\n        if cell_column is None:\n            cell_to_cell_ix = obs[\"ix\"].to_dict()\n        else:\n            cell_to_cell_ix = obs.set_index(cell_column)[\"ix\"].to_dict()\n\n        # load fragments tabix\n        import pysam\n\n        fragments_tabix = pysam.TabixFile(str(fragments_file))\n\n        coordinates_raw = []\n        mapping_raw = []\n\n        for _, (gene, promoter_info) in tqdm.tqdm(\n            enumerate(regions.coordinates.iterrows()),\n            total=regions.coordinates.shape[0],\n            leave=False,\n            desc=\"Processing fragments\",\n        ):\n            gene_ix = var.loc[gene, \"ix\"]\n            start = max(0, promoter_info[\"start\"])\n\n            fragments_promoter = fragments_tabix.fetch(\n                promoter_info[\"chrom\"],\n                start,\n                promoter_info[\"end\"],\n                parser=pysam.asTuple(),\n            )\n\n            for fragment in fragments_promoter:\n                cell = fragment[3]\n\n                # only store the fragment if the cell is actually of interest\n                if cell in cell_to_cell_ix:\n                    # add raw data of fragment relative to tss\n                    coordinates_raw.append(\n                        [\n                            (int(fragment[1]) - promoter_info[\"tss\"])\n                            * promoter_info[\"strand\"],\n                            (int(fragment[2]) - promoter_info[\"tss\"])\n                            * promoter_info[\"strand\"],\n                        ][:: promoter_info[\"strand\"]]\n                    )\n\n                    # add mapping of cell/gene\n                    mapping_raw.append([cell_to_cell_ix[fragment[3]], gene_ix])\n\n        coordinates = torch.tensor(np.array(coordinates_raw, dtype=np.int64))\n        mapping = torch.tensor(np.array(mapping_raw), dtype=torch.int64)\n\n        # Sort `coordinates` and `mapping` according to `mapping`\n        sorted_idx = torch.argsort((mapping[:, 0] * var.shape[0] + mapping[:, 1]))\n        mapping = mapping[sorted_idx]\n        coordinates = coordinates[sorted_idx]\n\n        return cls.create(\n            path=path,\n            coordinates=coordinates,\n            mapping=mapping,\n            regions=regions,\n            var=var,\n            obs=obs,\n        )\n</code></pre>"},{"location":"reference/data/fragments/#chromatinhd.data.fragments.fragments.Fragments.cellxgene_indptr","title":"<code>cellxgene_indptr: torch.Tensor = StoredTorchInt64('cellxgene_indptr')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Index pointers for each cellxgene combination</p>"},{"location":"reference/data/fragments/#chromatinhd.data.fragments.fragments.Fragments.coordinates","title":"<code>coordinates: torch.Tensor = StoredTorchInt64('coordinates')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Coordinates of the two cut sites.</p>"},{"location":"reference/data/fragments/#chromatinhd.data.fragments.fragments.Fragments.mapping","title":"<code>mapping: torch.Tensor = StoredTorchInt64('mapping')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Mapping of a fragment to a gene and a cell</p>"},{"location":"reference/data/fragments/#chromatinhd.data.fragments.fragments.Fragments.obs","title":"<code>obs = TSV('obs')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>DataFrame containing information about cells.</p>"},{"location":"reference/data/fragments/#chromatinhd.data.fragments.fragments.Fragments.regions","title":"<code>regions: pd.DataFrame = Linked('regions')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Dataframe containing chromosome, start, end and strand of each region</p>"},{"location":"reference/data/fragments/#chromatinhd.data.fragments.fragments.Fragments.var","title":"<code>var = TSV('var')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>DataFrame containing information about regions.</p>"},{"location":"reference/data/fragments/#chromatinhd.data.fragments.fragments.Fragments.from_fragments_tsv","title":"<code>from_fragments_tsv(fragments_file, regions, obs, path, cell_column=None, overwrite=True)</code>  <code>classmethod</code>","text":"<p>Create a Fragments object from a fragments tsv file</p> <p>Parameters:</p> Name Type Description Default <code>fragments_file</code> <code>Union[pathlib.Path, str]</code> <p>Location of the <code>fragments.tsv</code> file created by e.g. CellRanger or sinto</p> required <code>obs</code> <code>pd.DataFrame</code> <p>DataFrame containing information about cells. The index should be the cell names as present in the fragments file. If not, you can specify the column name using the <code>cell_column</code> argument.</p> required <code>path</code> <code>Union[pathlib.Path, str]</code> <p>Folder in which the fragments data will be stored</p> required <code>regions</code> <code>Regions</code> <p>Regions object</p> required <code>cell_column</code> <code>optional</code> <p>Column name in the <code>obs</code> DataFrame containing the cell names. If not specified, the index of the <code>obs</code> DataFrame is used.</p> <code>None</code> <code>overwrite</code> <code>optional</code> <p>Whether to overwrite the data if it already exists</p> <code>True</code> Source code in <code>src/chromatinhd/data/fragments/fragments.py</code> <pre><code>@classmethod\ndef from_fragments_tsv(\n    cls,\n    fragments_file: Union[pathlib.Path, str],\n    regions: Regions,\n    obs: pd.DataFrame,\n    path: Union[pathlib.Path, str],\n    cell_column: str = None,\n    overwrite: bool = True,\n):\n\"\"\"\n    Create a Fragments object from a fragments tsv file\n\n    Parameters:\n        fragments_file:\n            Location of the `fragments.tsv` file created by e.g. CellRanger or sinto\n        obs:\n            DataFrame containing information about cells. The index should be the cell names as present in the fragments file. If not, you can specify the column name using the `cell_column` argument.\n        path:\n            Folder in which the fragments data will be stored\n        regions:\n            Regions object\n        cell_column (optional):\n            Column name in the `obs` DataFrame containing the cell names. If not specified, the index of the `obs` DataFrame is used.\n        overwrite (optional):\n            Whether to overwrite the data if it already exists\n    \"\"\"\n\n    if isinstance(fragments_file, str):\n        fragments_file = pathlib.Path(fragments_file)\n    if isinstance(path, str):\n        path = pathlib.Path(path)\n    if not fragments_file.exists():\n        raise FileNotFoundError(f\"File {fragments_file} does not exist\")\n    if not overwrite and path.exists():\n        raise FileExistsError(f\"Folder {path} already exists\")\n    path.mkdir(parents=True, exist_ok=True)\n\n    # regions information\n    var = pd.DataFrame(index=regions.coordinates.index)\n    var[\"ix\"] = np.arange(var.shape[0])\n\n    # cell information\n    obs[\"ix\"] = np.arange(obs.shape[0])\n    if cell_column is None:\n        cell_to_cell_ix = obs[\"ix\"].to_dict()\n    else:\n        cell_to_cell_ix = obs.set_index(cell_column)[\"ix\"].to_dict()\n\n    # load fragments tabix\n    import pysam\n\n    fragments_tabix = pysam.TabixFile(str(fragments_file))\n\n    coordinates_raw = []\n    mapping_raw = []\n\n    for _, (gene, promoter_info) in tqdm.tqdm(\n        enumerate(regions.coordinates.iterrows()),\n        total=regions.coordinates.shape[0],\n        leave=False,\n        desc=\"Processing fragments\",\n    ):\n        gene_ix = var.loc[gene, \"ix\"]\n        start = max(0, promoter_info[\"start\"])\n\n        fragments_promoter = fragments_tabix.fetch(\n            promoter_info[\"chrom\"],\n            start,\n            promoter_info[\"end\"],\n            parser=pysam.asTuple(),\n        )\n\n        for fragment in fragments_promoter:\n            cell = fragment[3]\n\n            # only store the fragment if the cell is actually of interest\n            if cell in cell_to_cell_ix:\n                # add raw data of fragment relative to tss\n                coordinates_raw.append(\n                    [\n                        (int(fragment[1]) - promoter_info[\"tss\"])\n                        * promoter_info[\"strand\"],\n                        (int(fragment[2]) - promoter_info[\"tss\"])\n                        * promoter_info[\"strand\"],\n                    ][:: promoter_info[\"strand\"]]\n                )\n\n                # add mapping of cell/gene\n                mapping_raw.append([cell_to_cell_ix[fragment[3]], gene_ix])\n\n    coordinates = torch.tensor(np.array(coordinates_raw, dtype=np.int64))\n    mapping = torch.tensor(np.array(mapping_raw), dtype=torch.int64)\n\n    # Sort `coordinates` and `mapping` according to `mapping`\n    sorted_idx = torch.argsort((mapping[:, 0] * var.shape[0] + mapping[:, 1]))\n    mapping = mapping[sorted_idx]\n    coordinates = coordinates[sorted_idx]\n\n    return cls.create(\n        path=path,\n        coordinates=coordinates,\n        mapping=mapping,\n        regions=regions,\n        var=var,\n        obs=obs,\n    )\n</code></pre>"},{"location":"reference/data/motifscan/","title":"Motifscan","text":""},{"location":"reference/data/motifscan/#chromatinhd.data.motifscan.Motifscan","title":"<code>chromatinhd.data.motifscan.Motifscan</code>","text":"<p>         Bases: <code>Flow</code></p> <p>A sprase representation of locations of different motifs in regions of the genome</p> Source code in <code>src/chromatinhd/data/motifscan/motifscan.py</code> <pre><code>class Motifscan(Flow):\n\"\"\"\n    A sprase representation of locations of different motifs in regions of the genome\n    \"\"\"\n\n    regions = Linked(\"regions\")\n    \"The regions\"\n\n    indptr = CompressedNumpyInt64(\"indptr\")\n    \"The index pointers for each position in the regions\"\n\n    position = CompressedNumpyInt64(\"position\")\n    \"Position associated to each site\"\n\n    indices = CompressedNumpyInt64(\"indices\")\n    \"Motif index associated to each site\"\n\n    scores = CompressedNumpyFloat64(\"scores\")\n    \"Scores associated with each detected site\"\n\n    strands = CompressedNumpyFloat64(\"strands\")\n    \"Strand associated with each detected site\"\n\n    shape = Stored(\"shape\")\n\n    n_motifs = Stored(\"n_motifs\")\n    \"Number of motifs\"\n\n    motifs = StoredDataFrame(\"motifs\")\n    \"Dataframe storing auxilliary information for each motif\"\n\n    @classmethod\n    def from_pwms(\n        cls,\n        pwms: dict,\n        regions: Regions,\n        fasta_file: Union[str, pathlib.Path],\n        path: Union[str, pathlib.Path],\n        cutoffs: Union[int, float, pd.Series] = None,\n        cutoff_col: str = None,\n        motifs: pd.DataFrame = None,\n        device=default_device,\n        batch_size: int = 5000000,\n    ):\n\"\"\"\n        Create a motifscan object from a set of pwms and a set of regions\n\n        Parameters:\n            pwms:\n                A dictionary of pwms, where the keys are the motif ids and the values are the pwms\n            regions:\n                A regions object\n            fasta_file:\n                The location of the fasta file containing the genome\n            motifs:\n                A dataframe containing auxilliary information for each motif\n            path:\n                The folder where the motifscan data will be stored.\n            cutoffs:\n                A dictionary containing the cutoffs for each motif.\n            cutoff_col:\n                The column in the motifs dataframe containing the cutoffs\n            device:\n                The device to use for the scanning\n            batch_size:\n                The batch size to use for scanning. Lower batch size if the GPU runs out of memory\n        \"\"\"\n\n        self = cls(path)\n\n        # check or create cutoffs\n        if cutoffs is None:\n            if cutoff_col is None:\n                raise ValueError(\n                    \"Either motifs+cutoff_col or cutoffs need to be specified.\"\n                )\n            if motifs is None:\n                raise ValueError(\n                    \"Either motifs+cutoff_col or cutoffs need to be specified. motifs is not given\"\n                )\n\n            cutoffs = motifs[cutoff_col].to_dict()\n        else:\n            if isinstance(cutoffs, (float, int)):\n                cutoffs = {motif: cutoffs for motif in pwms.keys()}\n            elif isinstance(cutoffs, pd.Series):\n                cutoffs = cutoffs.to_dict()\n            else:\n                raise ValueError(\"cutoffs should be a float, int, dict or pd.Series\")\n            assert set(cutoffs.keys()) == set(pwms.keys())\n\n        # check or create motifs\n        if motifs is None:\n            motifs = pd.DataFrame(\n                {\n                    \"motif\": list(pwms.keys()),\n                }\n            ).set_index(\"motif\")\n\n        # divide regions into batches according to batch size\n        region_coordinates = regions.coordinates\n\n        regions_coordinates = regions.coordinates\n        region_coordinates = divide_regions_in_batches(\n            region_coordinates, batch_size=batch_size\n        )\n\n        region_size = (\n            region_coordinates[\"end\"].values[0] - region_coordinates[\"start\"].values[0]\n        )\n\n        # load in fasta file\n        import pysam\n\n        fasta = pysam.FastaFile(fasta_file)\n\n        # do the actual counting by looping over the batches, extract the sequences and scan\n        positions = []\n        indices = []\n        scores = []\n        strands = []\n\n        for batch, region_coordinates_batch in tqdm.tqdm(\n            region_coordinates.groupby(\"batch\")\n        ):\n            sequences = [\n                fasta.fetch(chrom, start, end + 1)\n                for chrom, start, end in region_coordinates_batch[\n                    [\"chrom\", \"start\", \"end\"]\n                ].values\n            ]\n            assert (\n                len(set(len(sequence) for sequence in sequences)) == 1\n            ), \"All regions/sequences should have the same length\"\n            onehot = torch.stack(\n                [create_onehot(digitize_sequence(sequence)) for sequence in sequences]\n            )\n            for motif_ix, motif in enumerate(motifs.index):\n                cutoff = cutoffs[motif]\n\n                # get pwm\n                pwm = pwms[motif]\n                if not torch.is_tensor(pwm):\n                    pwm = torch.from_numpy(pwm)\n                pwm = pwm.to(dtype=torch.float32, device=onehot.device)\n\n                (\n                    scores_motif,\n                    positions_motif,\n                    strands_motif,\n                ) = scan(onehot, pwm, cutoff=cutoff)\n\n                positions_motif[0] = (\n                    positions_motif[0] + region_coordinates_batch[\"ix\"].values[0]\n                )\n\n                positions.append(positions_motif)\n                indices.append(\n                    torch.ones_like(scores_motif, dtype=torch.int) * motif_ix\n                )\n                scores.append(scores_motif)\n                strands.append(strands_motif)\n\n        # positions = [batch_dim (region and position), site]\n        positions = torch.concat(positions, -1)\n        positions = positions[0] * region_size + positions[1]\n        indices = torch.concat(indices, -1)\n        scores = torch.concat(scores, -1)\n        strands = torch.concat(strands, -1)\n\n        # sort by position\n        sorted_idx = torch.argsort(positions)\n        positions = positions[sorted_idx]\n        indices = indices[sorted_idx]\n        scores = scores[sorted_idx]\n        strands = strands[sorted_idx]\n\n        # calculate indptr\n        indptr = ind2ptr(positions, region_size * len(region_coordinates))\n\n        # store\n        self.positions = positions.numpy()\n        self.indptr = indptr.numpy()\n        self.indices = indices.numpy()\n        self.scores = scores.numpy()\n        self.strands = strands.numpy()\n        self.motifs = motifs\n\n        return self\n</code></pre>"},{"location":"reference/data/motifscan/#chromatinhd.data.motifscan.motifscan.Motifscan.indices","title":"<code>indices = CompressedNumpyInt64('indices')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Motif index associated to each site</p>"},{"location":"reference/data/motifscan/#chromatinhd.data.motifscan.motifscan.Motifscan.indptr","title":"<code>indptr = CompressedNumpyInt64('indptr')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The index pointers for each position in the regions</p>"},{"location":"reference/data/motifscan/#chromatinhd.data.motifscan.motifscan.Motifscan.motifs","title":"<code>motifs = StoredDataFrame('motifs')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Dataframe storing auxilliary information for each motif</p>"},{"location":"reference/data/motifscan/#chromatinhd.data.motifscan.motifscan.Motifscan.n_motifs","title":"<code>n_motifs = Stored('n_motifs')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of motifs</p>"},{"location":"reference/data/motifscan/#chromatinhd.data.motifscan.motifscan.Motifscan.position","title":"<code>position = CompressedNumpyInt64('position')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Position associated to each site</p>"},{"location":"reference/data/motifscan/#chromatinhd.data.motifscan.motifscan.Motifscan.regions","title":"<code>regions = Linked('regions')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The regions</p>"},{"location":"reference/data/motifscan/#chromatinhd.data.motifscan.motifscan.Motifscan.scores","title":"<code>scores = CompressedNumpyFloat64('scores')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Scores associated with each detected site</p>"},{"location":"reference/data/motifscan/#chromatinhd.data.motifscan.motifscan.Motifscan.strands","title":"<code>strands = CompressedNumpyFloat64('strands')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Strand associated with each detected site</p>"},{"location":"reference/data/motifscan/#chromatinhd.data.motifscan.motifscan.Motifscan.from_pwms","title":"<code>from_pwms(pwms, regions, fasta_file, path, cutoffs=None, cutoff_col=None, motifs=None, device=default_device, batch_size=5000000)</code>  <code>classmethod</code>","text":"<p>Create a motifscan object from a set of pwms and a set of regions</p> <p>Parameters:</p> Name Type Description Default <code>pwms</code> <code>dict</code> <p>A dictionary of pwms, where the keys are the motif ids and the values are the pwms</p> required <code>regions</code> <code>Regions</code> <p>A regions object</p> required <code>fasta_file</code> <code>Union[str, pathlib.Path]</code> <p>The location of the fasta file containing the genome</p> required <code>motifs</code> <code>pd.DataFrame</code> <p>A dataframe containing auxilliary information for each motif</p> <code>None</code> <code>path</code> <code>Union[str, pathlib.Path]</code> <p>The folder where the motifscan data will be stored.</p> required <code>cutoffs</code> <code>Union[int, float, pd.Series]</code> <p>A dictionary containing the cutoffs for each motif.</p> <code>None</code> <code>cutoff_col</code> <code>str</code> <p>The column in the motifs dataframe containing the cutoffs</p> <code>None</code> <code>device</code> <p>The device to use for the scanning</p> <code>default_device</code> <code>batch_size</code> <code>int</code> <p>The batch size to use for scanning. Lower batch size if the GPU runs out of memory</p> <code>5000000</code> Source code in <code>src/chromatinhd/data/motifscan/motifscan.py</code> <pre><code>@classmethod\ndef from_pwms(\n    cls,\n    pwms: dict,\n    regions: Regions,\n    fasta_file: Union[str, pathlib.Path],\n    path: Union[str, pathlib.Path],\n    cutoffs: Union[int, float, pd.Series] = None,\n    cutoff_col: str = None,\n    motifs: pd.DataFrame = None,\n    device=default_device,\n    batch_size: int = 5000000,\n):\n\"\"\"\n    Create a motifscan object from a set of pwms and a set of regions\n\n    Parameters:\n        pwms:\n            A dictionary of pwms, where the keys are the motif ids and the values are the pwms\n        regions:\n            A regions object\n        fasta_file:\n            The location of the fasta file containing the genome\n        motifs:\n            A dataframe containing auxilliary information for each motif\n        path:\n            The folder where the motifscan data will be stored.\n        cutoffs:\n            A dictionary containing the cutoffs for each motif.\n        cutoff_col:\n            The column in the motifs dataframe containing the cutoffs\n        device:\n            The device to use for the scanning\n        batch_size:\n            The batch size to use for scanning. Lower batch size if the GPU runs out of memory\n    \"\"\"\n\n    self = cls(path)\n\n    # check or create cutoffs\n    if cutoffs is None:\n        if cutoff_col is None:\n            raise ValueError(\n                \"Either motifs+cutoff_col or cutoffs need to be specified.\"\n            )\n        if motifs is None:\n            raise ValueError(\n                \"Either motifs+cutoff_col or cutoffs need to be specified. motifs is not given\"\n            )\n\n        cutoffs = motifs[cutoff_col].to_dict()\n    else:\n        if isinstance(cutoffs, (float, int)):\n            cutoffs = {motif: cutoffs for motif in pwms.keys()}\n        elif isinstance(cutoffs, pd.Series):\n            cutoffs = cutoffs.to_dict()\n        else:\n            raise ValueError(\"cutoffs should be a float, int, dict or pd.Series\")\n        assert set(cutoffs.keys()) == set(pwms.keys())\n\n    # check or create motifs\n    if motifs is None:\n        motifs = pd.DataFrame(\n            {\n                \"motif\": list(pwms.keys()),\n            }\n        ).set_index(\"motif\")\n\n    # divide regions into batches according to batch size\n    region_coordinates = regions.coordinates\n\n    regions_coordinates = regions.coordinates\n    region_coordinates = divide_regions_in_batches(\n        region_coordinates, batch_size=batch_size\n    )\n\n    region_size = (\n        region_coordinates[\"end\"].values[0] - region_coordinates[\"start\"].values[0]\n    )\n\n    # load in fasta file\n    import pysam\n\n    fasta = pysam.FastaFile(fasta_file)\n\n    # do the actual counting by looping over the batches, extract the sequences and scan\n    positions = []\n    indices = []\n    scores = []\n    strands = []\n\n    for batch, region_coordinates_batch in tqdm.tqdm(\n        region_coordinates.groupby(\"batch\")\n    ):\n        sequences = [\n            fasta.fetch(chrom, start, end + 1)\n            for chrom, start, end in region_coordinates_batch[\n                [\"chrom\", \"start\", \"end\"]\n            ].values\n        ]\n        assert (\n            len(set(len(sequence) for sequence in sequences)) == 1\n        ), \"All regions/sequences should have the same length\"\n        onehot = torch.stack(\n            [create_onehot(digitize_sequence(sequence)) for sequence in sequences]\n        )\n        for motif_ix, motif in enumerate(motifs.index):\n            cutoff = cutoffs[motif]\n\n            # get pwm\n            pwm = pwms[motif]\n            if not torch.is_tensor(pwm):\n                pwm = torch.from_numpy(pwm)\n            pwm = pwm.to(dtype=torch.float32, device=onehot.device)\n\n            (\n                scores_motif,\n                positions_motif,\n                strands_motif,\n            ) = scan(onehot, pwm, cutoff=cutoff)\n\n            positions_motif[0] = (\n                positions_motif[0] + region_coordinates_batch[\"ix\"].values[0]\n            )\n\n            positions.append(positions_motif)\n            indices.append(\n                torch.ones_like(scores_motif, dtype=torch.int) * motif_ix\n            )\n            scores.append(scores_motif)\n            strands.append(strands_motif)\n\n    # positions = [batch_dim (region and position), site]\n    positions = torch.concat(positions, -1)\n    positions = positions[0] * region_size + positions[1]\n    indices = torch.concat(indices, -1)\n    scores = torch.concat(scores, -1)\n    strands = torch.concat(strands, -1)\n\n    # sort by position\n    sorted_idx = torch.argsort(positions)\n    positions = positions[sorted_idx]\n    indices = indices[sorted_idx]\n    scores = scores[sorted_idx]\n    strands = strands[sorted_idx]\n\n    # calculate indptr\n    indptr = ind2ptr(positions, region_size * len(region_coordinates))\n\n    # store\n    self.positions = positions.numpy()\n    self.indptr = indptr.numpy()\n    self.indices = indices.numpy()\n    self.scores = scores.numpy()\n    self.strands = strands.numpy()\n    self.motifs = motifs\n\n    return self\n</code></pre>"},{"location":"reference/data/regions/","title":"Regions","text":""},{"location":"reference/data/regions/#chromatinhd.data.Regions","title":"<code>chromatinhd.data.Regions</code>","text":"<p>         Bases: <code>Flow</code></p> <p>Regions, typically centered around a transcription start site</p> Source code in <code>src/chromatinhd/data/regions.py</code> <pre><code>class Regions(Flow):\n\"\"\"\n    Regions, typically centered around a transcription start site\n    \"\"\"\n\n    coordinates = TSV(\"coordinates\", columns=[\"chrom\", \"start\", \"end\"])\n    window = Stored(\"window\")\n\n    @classmethod\n    def from_canonical_transcripts(\n        cls, canonical_transcripts: pd.DataFrame, window: np.ndarray, path: pathlib.Path\n    ):\n\"\"\"\n        Create regions from a Dataframe of canonical transcripts, using a specified window around each transcription start site.\n\n        Parameters:\n            canonical_transcripts:\n                Dataframe of canonical transcripts, with columns chrom, start, end, strand, ensembl_transcript_id\n            window:\n                Window around each transcription start site. Should be a 2-element array, e.g. [-10000, 10000]\n            path:\n                Folder in which the regions data will be stored\n        \"\"\"\n        regions = canonical_transcripts[\n            [\"chrom\", \"start\", \"end\", \"ensembl_transcript_id\"]\n        ].copy()\n\n        regions[\"tss\"] = [\n            genes_row[\"start\"] if genes_row[\"strand\"] == +1 else genes_row[\"end\"]\n            for _, genes_row in canonical_transcripts.loc[regions.index].iterrows()\n        ]\n        regions[\"strand\"] = canonical_transcripts[\"strand\"]\n        regions[\"positive_strand\"] = (regions[\"strand\"] == 1).astype(int)\n        regions[\"negative_strand\"] = (regions[\"strand\"] == -1).astype(int)\n        regions[\"chrom\"] = canonical_transcripts.loc[regions.index, \"chrom\"]\n\n        regions[\"start\"] = (\n            regions[\"tss\"]\n            + window[0] * (regions[\"strand\"] == 1)\n            - window[1] * (regions[\"strand\"] == -1)\n        )\n        regions[\"end\"] = (\n            regions[\"tss\"]\n            + window[1] * (regions[\"strand\"] == -1)\n            - window[0] * (regions[\"strand\"] == 1)\n        )\n\n        return cls.create(\n            path=path,\n            coordinates=regions[\n                [\"chrom\", \"start\", \"end\", \"tss\", \"strand\", \"ensembl_transcript_id\"]\n            ],\n            window=window,\n        )\n</code></pre>"},{"location":"reference/data/regions/#chromatinhd.data.regions.Regions.from_canonical_transcripts","title":"<code>from_canonical_transcripts(canonical_transcripts, window, path)</code>  <code>classmethod</code>","text":"<p>Create regions from a Dataframe of canonical transcripts, using a specified window around each transcription start site.</p> <p>Parameters:</p> Name Type Description Default <code>canonical_transcripts</code> <code>pd.DataFrame</code> <p>Dataframe of canonical transcripts, with columns chrom, start, end, strand, ensembl_transcript_id</p> required <code>window</code> <code>np.ndarray</code> <p>Window around each transcription start site. Should be a 2-element array, e.g. [-10000, 10000]</p> required <code>path</code> <code>pathlib.Path</code> <p>Folder in which the regions data will be stored</p> required Source code in <code>src/chromatinhd/data/regions.py</code> <pre><code>@classmethod\ndef from_canonical_transcripts(\n    cls, canonical_transcripts: pd.DataFrame, window: np.ndarray, path: pathlib.Path\n):\n\"\"\"\n    Create regions from a Dataframe of canonical transcripts, using a specified window around each transcription start site.\n\n    Parameters:\n        canonical_transcripts:\n            Dataframe of canonical transcripts, with columns chrom, start, end, strand, ensembl_transcript_id\n        window:\n            Window around each transcription start site. Should be a 2-element array, e.g. [-10000, 10000]\n        path:\n            Folder in which the regions data will be stored\n    \"\"\"\n    regions = canonical_transcripts[\n        [\"chrom\", \"start\", \"end\", \"ensembl_transcript_id\"]\n    ].copy()\n\n    regions[\"tss\"] = [\n        genes_row[\"start\"] if genes_row[\"strand\"] == +1 else genes_row[\"end\"]\n        for _, genes_row in canonical_transcripts.loc[regions.index].iterrows()\n    ]\n    regions[\"strand\"] = canonical_transcripts[\"strand\"]\n    regions[\"positive_strand\"] = (regions[\"strand\"] == 1).astype(int)\n    regions[\"negative_strand\"] = (regions[\"strand\"] == -1).astype(int)\n    regions[\"chrom\"] = canonical_transcripts.loc[regions.index, \"chrom\"]\n\n    regions[\"start\"] = (\n        regions[\"tss\"]\n        + window[0] * (regions[\"strand\"] == 1)\n        - window[1] * (regions[\"strand\"] == -1)\n    )\n    regions[\"end\"] = (\n        regions[\"tss\"]\n        + window[1] * (regions[\"strand\"] == -1)\n        - window[0] * (regions[\"strand\"] == 1)\n    )\n\n    return cls.create(\n        path=path,\n        coordinates=regions[\n            [\"chrom\", \"start\", \"end\", \"tss\", \"strand\", \"ensembl_transcript_id\"]\n        ],\n        window=window,\n    )\n</code></pre>"},{"location":"reference/data/transcriptome/","title":"Transcriptome","text":""},{"location":"reference/data/transcriptome/#chromatinhd.data.Transcriptome","title":"<code>chromatinhd.data.Transcriptome</code>","text":"<p>         Bases: <code>Flow</code></p> <p>A transcriptome containing counts for each gene in each cell.</p> Source code in <code>src/chromatinhd/data/transcriptome/transcriptome.py</code> <pre><code>class Transcriptome(Flow):\n\"\"\"\n    A transcriptome containing counts for each gene in each cell.\n    \"\"\"\n\n    var = TSV(\"var\", index_name=\"gene\")\n    obs = TSV(\"obs\", index_name=\"cell\")\n\n    adata = Stored(\"adata\")\n    \"Anndata object containing the transcriptome data.\"\n\n    def gene_id(self, symbol, column=\"symbol\"):\n\"\"\"\n        Get the gene id for a given gene symbol.\n        \"\"\"\n        assert all(pd.Series(symbol).isin(self.var[column])), set(\n            pd.Series(symbol)[~pd.Series(symbol).isin(self.var[column])]\n        )\n        return self.var.reset_index(\"gene\").set_index(column).loc[symbol][\"gene\"]\n\n    def symbol(self, gene_id, column=\"symbol\"):\n\"\"\"\n        Get the gene symbol for a given gene ID (e.g. Ensembl ID).\n        \"\"\"\n        assert all(pd.Series(gene_id).isin(self.var.index)), set(\n            pd.Series(gene_id)[~pd.Series(gene_id).isin(self.var.index)]\n        )\n        return self.var.loc[gene_id][column]\n\n    def gene_ix(self, symbol):\n\"\"\"\n        Get the gene index for a given gene symbol.\n        \"\"\"\n        self.var[\"ix\"] = np.arange(self.var.shape[0])\n        assert all(pd.Series(symbol).isin(self.var[\"symbol\"])), set(\n            pd.Series(symbol)[~pd.Series(symbol).isin(self.var[\"symbol\"])]\n        )\n        return self.var.reset_index(\"gene\").set_index(\"symbol\").loc[symbol][\"ix\"]\n\n    def create_X(self):\n        X_scipy = self.adata.X\n        if isinstance(X_scipy, np.ndarray):\n            import scipy.sparse\n\n            X_scipy = scipy.sparse.csr_matrix(X_scipy)\n        X = sparse.COOMatrix.from_scipy_csr(X_scipy)\n        X.populate_mapping()\n\n        self.X = X\n\n    X = Stored(\"X\")\n    \"Raw counts for each gene in each cell.\"\n\n    @classmethod\n    def from_adata(cls, adata, path: Union[pathlib.Path, str]):\n\"\"\"\n        Create a Transcriptome object from an AnnData object.\n\n        Parameters:\n            adata:\n                Anndata object containing the transcriptome data.\n            path:\n                Folder in which the transcriptome data will be stored.\n        \"\"\"\n        transcriptome = cls(path=path)\n        transcriptome.adata = adata\n        transcriptome.layers[\"X\"] = adata.X\n        transcriptome.var = adata.var\n        transcriptome.obs = adata.obs\n        return transcriptome\n\n    layers = StoredDict(\"layers\", Stored)\n    \"Dictionary of layers, such as raw, normalized and imputed data.\"\n</code></pre>"},{"location":"reference/data/transcriptome/#chromatinhd.data.transcriptome.transcriptome.Transcriptome.X","title":"<code>X = Stored('X')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Raw counts for each gene in each cell.</p>"},{"location":"reference/data/transcriptome/#chromatinhd.data.transcriptome.transcriptome.Transcriptome.adata","title":"<code>adata = Stored('adata')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Anndata object containing the transcriptome data.</p>"},{"location":"reference/data/transcriptome/#chromatinhd.data.transcriptome.transcriptome.Transcriptome.layers","title":"<code>layers = StoredDict('layers', Stored)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Dictionary of layers, such as raw, normalized and imputed data.</p>"},{"location":"reference/data/transcriptome/#chromatinhd.data.transcriptome.transcriptome.Transcriptome.from_adata","title":"<code>from_adata(adata, path)</code>  <code>classmethod</code>","text":"<p>Create a Transcriptome object from an AnnData object.</p> <p>Parameters:</p> Name Type Description Default <code>adata</code> <p>Anndata object containing the transcriptome data.</p> required <code>path</code> <code>Union[pathlib.Path, str]</code> <p>Folder in which the transcriptome data will be stored.</p> required Source code in <code>src/chromatinhd/data/transcriptome/transcriptome.py</code> <pre><code>@classmethod\ndef from_adata(cls, adata, path: Union[pathlib.Path, str]):\n\"\"\"\n    Create a Transcriptome object from an AnnData object.\n\n    Parameters:\n        adata:\n            Anndata object containing the transcriptome data.\n        path:\n            Folder in which the transcriptome data will be stored.\n    \"\"\"\n    transcriptome = cls(path=path)\n    transcriptome.adata = adata\n    transcriptome.layers[\"X\"] = adata.X\n    transcriptome.var = adata.var\n    transcriptome.obs = adata.obs\n    return transcriptome\n</code></pre>"},{"location":"reference/data/transcriptome/#chromatinhd.data.transcriptome.transcriptome.Transcriptome.gene_id","title":"<code>gene_id(symbol, column='symbol')</code>","text":"<p>Get the gene id for a given gene symbol.</p> Source code in <code>src/chromatinhd/data/transcriptome/transcriptome.py</code> <pre><code>def gene_id(self, symbol, column=\"symbol\"):\n\"\"\"\n    Get the gene id for a given gene symbol.\n    \"\"\"\n    assert all(pd.Series(symbol).isin(self.var[column])), set(\n        pd.Series(symbol)[~pd.Series(symbol).isin(self.var[column])]\n    )\n    return self.var.reset_index(\"gene\").set_index(column).loc[symbol][\"gene\"]\n</code></pre>"},{"location":"reference/data/transcriptome/#chromatinhd.data.transcriptome.transcriptome.Transcriptome.gene_ix","title":"<code>gene_ix(symbol)</code>","text":"<p>Get the gene index for a given gene symbol.</p> Source code in <code>src/chromatinhd/data/transcriptome/transcriptome.py</code> <pre><code>def gene_ix(self, symbol):\n\"\"\"\n    Get the gene index for a given gene symbol.\n    \"\"\"\n    self.var[\"ix\"] = np.arange(self.var.shape[0])\n    assert all(pd.Series(symbol).isin(self.var[\"symbol\"])), set(\n        pd.Series(symbol)[~pd.Series(symbol).isin(self.var[\"symbol\"])]\n    )\n    return self.var.reset_index(\"gene\").set_index(\"symbol\").loc[symbol][\"ix\"]\n</code></pre>"},{"location":"reference/data/transcriptome/#chromatinhd.data.transcriptome.transcriptome.Transcriptome.symbol","title":"<code>symbol(gene_id, column='symbol')</code>","text":"<p>Get the gene symbol for a given gene ID (e.g. Ensembl ID).</p> Source code in <code>src/chromatinhd/data/transcriptome/transcriptome.py</code> <pre><code>def symbol(self, gene_id, column=\"symbol\"):\n\"\"\"\n    Get the gene symbol for a given gene ID (e.g. Ensembl ID).\n    \"\"\"\n    assert all(pd.Series(gene_id).isin(self.var.index)), set(\n        pd.Series(gene_id)[~pd.Series(gene_id).isin(self.var.index)]\n    )\n    return self.var.loc[gene_id][column]\n</code></pre>"},{"location":"reference/models/diff/interpret/","title":"Interpret","text":""},{"location":"reference/models/diff/interpret/#chromatinhd.models.diff.interpret.GenePositional","title":"<code>chromatinhd.models.diff.interpret.GenePositional</code>","text":"<p>         Bases: <code>chd.flow.Flow</code></p> <p>Positional interpretation of diff models</p> Source code in <code>src/chromatinhd/models/diff/interpret/genepositional.py</code> <pre><code>class GenePositional(chd.flow.Flow):\n\"\"\"\n    Positional interpretation of *diff* models\n    \"\"\"\n\n    genes = chd.flow.Stored(\"genes\", default=set)\n\n    def score(\n        self,\n        fragments: Fragments,\n        clustering: Clustering,\n        models: Models,\n        genes=None,\n        force=False,\n        device=default_device,\n    ):\n\"\"\"\n        Main scoring function\n\n        Parameters:\n            fragments:\n                the fragments\n            clustering:\n                the clustering\n            models:\n                the models\n            genes:\n                the genes to score, if None, all genes are scored\n            force:\n                whether to force rescoring even if the scores already exist\n            device:\n                the device to use\n        \"\"\"\n        force_ = force\n\n        if genes is None:\n            genes = fragments.var.index\n\n        pbar = tqdm.tqdm(genes, leave=False)\n\n        window = fragments.regions.window\n\n        for gene in pbar:\n            print(gene)\n            pbar.set_description(gene)\n            probs_file = self.get_scoring_path(gene) / \"probs.pkl\"\n\n            force = force_\n            if not probs_file.exists():\n                force = True\n\n            if force:\n                design_gene = pd.DataFrame(\n                    {\"gene_ix\": [fragments.var.index.get_loc(gene)]}\n                ).astype(\"category\")\n                design_gene.index = pd.Series([gene], name=\"gene\")\n                design_clustering = pd.DataFrame(\n                    {\"active_cluster\": np.arange(clustering.n_clusters)}\n                ).astype(\"category\")\n                design_clustering.index = clustering.cluster_info.index\n                design_coord = pd.DataFrame(\n                    {\"coord\": np.arange(window[0], window[1] + 1, step=25)}\n                ).astype(\"category\")\n                design_coord.index = design_coord[\"coord\"]\n                design = chd.utils.crossing(\n                    design_gene, design_clustering, design_coord\n                )\n\n                batch_size = 5000\n                design[\"batch\"] = np.floor(\n                    np.arange(design.shape[0]) / batch_size\n                ).astype(int)\n\n                probs = []\n                for model in models:\n                    probs_model = []\n                    for _, design_subset in design.groupby(\"batch\"):\n                        pseudocoordinates = torch.from_numpy(\n                            design_subset[\"coord\"].values.astype(int)\n                        )\n                        pseudocoordinates = (pseudocoordinates - window[0]) / (\n                            window[1] - window[0]\n                        )\n                        pseudocluster = torch.nn.functional.one_hot(\n                            torch.from_numpy(\n                                design_subset[\"active_cluster\"].values.astype(int)\n                            ),\n                            clustering.n_clusters,\n                        ).to(torch.float)\n                        gene_ix = torch.from_numpy(\n                            design_subset[\"gene_ix\"].values.astype(int)\n                        )\n\n                        prob = model.evaluate_pseudo(\n                            pseudocoordinates,\n                            clustering=pseudocluster,\n                            gene_ix=gene_ix,\n                            device=device,\n                        )\n\n                        probs_model.append(prob.numpy())\n                    probs_model = np.hstack(probs_model)\n                    probs.append(probs_model)\n\n                probs = np.vstack(probs)\n                probs = probs.mean(axis=0)\n\n                probs = xr.DataArray(\n                    probs.reshape(  # we have only one gene anyway\n                        (\n                            design_clustering.shape[0],\n                            design_coord.shape[0],\n                        )\n                    ),\n                    coords=[\n                        design_clustering.index,\n                        design_coord.index,\n                    ],\n                )\n\n                pickle.dump(probs, probs_file.open(\"wb\"))\n\n                self.genes = self.genes | {gene}\n\n    def get_plotdata(self, gene):\n\"\"\"\n        Returns the plotdata for a given gene\n\n        Parameters:\n            gene:\n                the gene\n\n        Returns:\n            Two dataframes, one with the probabilities per cluster, one with the mean\n        \"\"\"\n        probs_file = self.get_scoring_path(gene) / \"probs.pkl\"\n        if not probs_file.exists():\n            raise FileNotFoundError(f\"File {probs_file} does not exist\")\n\n        probs = pickle.load(probs_file.open(\"rb\"))\n        plotdata = probs.to_dataframe(\"prob\")\n\n        window = probs.coords[\"coord\"].values[[0, -1]]\n\n        plotdata[\"prob\"] = (\n            plotdata[\"prob\"]\n            - np.log(\n                plotdata.reset_index()\n                .groupby([\"cluster\"])\n                .apply(\n                    lambda x: np.trapz(\n                        np.exp(x[\"prob\"]),\n                        x[\"coord\"].astype(float) / (window[1] - window[0]),\n                    )\n                )\n            ).mean()\n        )\n        plotdata_mean = plotdata[[\"prob\"]].groupby(\"coord\").mean()\n\n        return plotdata, plotdata_mean\n\n    def get_scoring_path(self, gene):\n        path = self.path / f\"{gene}\"\n        path.mkdir(parents=True, exist_ok=True)\n        return path\n</code></pre>"},{"location":"reference/models/diff/interpret/#chromatinhd.models.diff.interpret.genepositional.GenePositional.get_plotdata","title":"<code>get_plotdata(gene)</code>","text":"<p>Returns the plotdata for a given gene</p> <p>Parameters:</p> Name Type Description Default <code>gene</code> <p>the gene</p> required <p>Returns:</p> Type Description <p>Two dataframes, one with the probabilities per cluster, one with the mean</p> Source code in <code>src/chromatinhd/models/diff/interpret/genepositional.py</code> <pre><code>def get_plotdata(self, gene):\n\"\"\"\n    Returns the plotdata for a given gene\n\n    Parameters:\n        gene:\n            the gene\n\n    Returns:\n        Two dataframes, one with the probabilities per cluster, one with the mean\n    \"\"\"\n    probs_file = self.get_scoring_path(gene) / \"probs.pkl\"\n    if not probs_file.exists():\n        raise FileNotFoundError(f\"File {probs_file} does not exist\")\n\n    probs = pickle.load(probs_file.open(\"rb\"))\n    plotdata = probs.to_dataframe(\"prob\")\n\n    window = probs.coords[\"coord\"].values[[0, -1]]\n\n    plotdata[\"prob\"] = (\n        plotdata[\"prob\"]\n        - np.log(\n            plotdata.reset_index()\n            .groupby([\"cluster\"])\n            .apply(\n                lambda x: np.trapz(\n                    np.exp(x[\"prob\"]),\n                    x[\"coord\"].astype(float) / (window[1] - window[0]),\n                )\n            )\n        ).mean()\n    )\n    plotdata_mean = plotdata[[\"prob\"]].groupby(\"coord\").mean()\n\n    return plotdata, plotdata_mean\n</code></pre>"},{"location":"reference/models/diff/interpret/#chromatinhd.models.diff.interpret.genepositional.GenePositional.score","title":"<code>score(fragments, clustering, models, genes=None, force=False, device=default_device)</code>","text":"<p>Main scoring function</p> <p>Parameters:</p> Name Type Description Default <code>fragments</code> <code>Fragments</code> <p>the fragments</p> required <code>clustering</code> <code>Clustering</code> <p>the clustering</p> required <code>models</code> <code>Models</code> <p>the models</p> required <code>genes</code> <p>the genes to score, if None, all genes are scored</p> <code>None</code> <code>force</code> <p>whether to force rescoring even if the scores already exist</p> <code>False</code> <code>device</code> <p>the device to use</p> <code>default_device</code> Source code in <code>src/chromatinhd/models/diff/interpret/genepositional.py</code> <pre><code>def score(\n    self,\n    fragments: Fragments,\n    clustering: Clustering,\n    models: Models,\n    genes=None,\n    force=False,\n    device=default_device,\n):\n\"\"\"\n    Main scoring function\n\n    Parameters:\n        fragments:\n            the fragments\n        clustering:\n            the clustering\n        models:\n            the models\n        genes:\n            the genes to score, if None, all genes are scored\n        force:\n            whether to force rescoring even if the scores already exist\n        device:\n            the device to use\n    \"\"\"\n    force_ = force\n\n    if genes is None:\n        genes = fragments.var.index\n\n    pbar = tqdm.tqdm(genes, leave=False)\n\n    window = fragments.regions.window\n\n    for gene in pbar:\n        print(gene)\n        pbar.set_description(gene)\n        probs_file = self.get_scoring_path(gene) / \"probs.pkl\"\n\n        force = force_\n        if not probs_file.exists():\n            force = True\n\n        if force:\n            design_gene = pd.DataFrame(\n                {\"gene_ix\": [fragments.var.index.get_loc(gene)]}\n            ).astype(\"category\")\n            design_gene.index = pd.Series([gene], name=\"gene\")\n            design_clustering = pd.DataFrame(\n                {\"active_cluster\": np.arange(clustering.n_clusters)}\n            ).astype(\"category\")\n            design_clustering.index = clustering.cluster_info.index\n            design_coord = pd.DataFrame(\n                {\"coord\": np.arange(window[0], window[1] + 1, step=25)}\n            ).astype(\"category\")\n            design_coord.index = design_coord[\"coord\"]\n            design = chd.utils.crossing(\n                design_gene, design_clustering, design_coord\n            )\n\n            batch_size = 5000\n            design[\"batch\"] = np.floor(\n                np.arange(design.shape[0]) / batch_size\n            ).astype(int)\n\n            probs = []\n            for model in models:\n                probs_model = []\n                for _, design_subset in design.groupby(\"batch\"):\n                    pseudocoordinates = torch.from_numpy(\n                        design_subset[\"coord\"].values.astype(int)\n                    )\n                    pseudocoordinates = (pseudocoordinates - window[0]) / (\n                        window[1] - window[0]\n                    )\n                    pseudocluster = torch.nn.functional.one_hot(\n                        torch.from_numpy(\n                            design_subset[\"active_cluster\"].values.astype(int)\n                        ),\n                        clustering.n_clusters,\n                    ).to(torch.float)\n                    gene_ix = torch.from_numpy(\n                        design_subset[\"gene_ix\"].values.astype(int)\n                    )\n\n                    prob = model.evaluate_pseudo(\n                        pseudocoordinates,\n                        clustering=pseudocluster,\n                        gene_ix=gene_ix,\n                        device=device,\n                    )\n\n                    probs_model.append(prob.numpy())\n                probs_model = np.hstack(probs_model)\n                probs.append(probs_model)\n\n            probs = np.vstack(probs)\n            probs = probs.mean(axis=0)\n\n            probs = xr.DataArray(\n                probs.reshape(  # we have only one gene anyway\n                    (\n                        design_clustering.shape[0],\n                        design_coord.shape[0],\n                    )\n                ),\n                coords=[\n                    design_clustering.index,\n                    design_coord.index,\n                ],\n            )\n\n            pickle.dump(probs, probs_file.open(\"wb\"))\n\n            self.genes = self.genes | {gene}\n</code></pre>"},{"location":"reference/models/pred/interpret/","title":"Interpret","text":""},{"location":"reference/models/pred/interpret/#chromatinhd.models.pred.interpret.GeneMultiWindow","title":"<code>chromatinhd.models.pred.interpret.GeneMultiWindow</code>","text":"<p>         Bases: <code>chd.flow.Flow</code></p> <p>Interpret a pred model positionally by censoring windows of across multiple window sizes.</p> Source code in <code>src/chromatinhd/models/pred/interpret/genemultiwindow.py</code> <pre><code>class GeneMultiWindow(chd.flow.Flow):\n\"\"\"\n    Interpret a *pred* model positionally by censoring windows of across multiple window sizes.\n    \"\"\"\n\n    design = chd.flow.Stored(\"design\")\n\"\"\"\n    The design of the censoring windows.\n    \"\"\"\n\n    genes = chd.flow.Stored(\"genes\", default=set)\n\"\"\"\n    The genes that have been scored.\n    \"\"\"\n\n    def score(\n        self,\n        fragments,\n        transcriptome,\n        models,\n        folds,\n        genes,\n        censorer,\n        force=False,\n        device=default_device,\n    ):\n        force_ = force\n        design = censorer.design.iloc[1:].copy()\n        self.design = design\n\n        pbar = tqdm.tqdm(genes, leave=False)\n\n        for gene in pbar:\n            pbar.set_description(gene)\n            scores_file = self.get_scoring_path(gene) / \"scores.pkl\"\n\n            force = force_\n            if not scores_file.exists():\n                force = True\n\n            if force:\n                deltacor_folds = []\n                lost_folds = []\n                effect_folds = []\n                for fold, model in zip(folds, models):\n                    predicted, expected, n_fragments = model.get_prediction_censored(\n                        fragments,\n                        transcriptome,\n                        censorer,\n                        cell_ixs=np.concatenate(\n                            [fold[\"cells_validation\"], fold[\"cells_test\"]]\n                        ),\n                        genes=[gene],\n                        device=device,\n                    )\n\n                    # select 1st gene, given that we're working with one gene anyway\n                    predicted = predicted[..., 0]\n                    expected = expected[..., 0]\n                    n_fragments = n_fragments[..., 0]\n\n                    cor = chd.utils.paircor(predicted, expected, dim=-1)\n                    deltacor = cor[1:] - cor[0]\n\n                    lost = (n_fragments[0] - n_fragments[1:]).mean(-1)\n\n                    effect = (predicted[0] - predicted[1:]).mean(-1)\n\n                    deltacor_folds.append(deltacor)\n                    lost_folds.append(lost)\n                    effect_folds.append(effect)\n\n                deltacor_folds = np.stack(deltacor_folds, 0)\n                lost_folds = np.stack(lost_folds, 0)\n                effect_folds = np.stack(effect_folds, 0)\n\n                result = xr.Dataset(\n                    {\n                        \"deltacor\": xr.DataArray(\n                            deltacor_folds,\n                            coords=[\n                                (\"model\", np.arange(len(models))),\n                                (\"window\", design.index),\n                            ],\n                        ),\n                        \"lost\": xr.DataArray(\n                            lost_folds,\n                            coords=[\n                                (\"model\", np.arange(len(models))),\n                                (\"window\", design.index),\n                            ],\n                        ),\n                        \"effect\": xr.DataArray(\n                            effect_folds,\n                            coords=[\n                                (\"model\", np.arange(len(models))),\n                                (\"window\", design.index),\n                            ],\n                        ),\n                    }\n                )\n\n                pickle.dump(result, scores_file.open(\"wb\"))\n\n                self.genes = self.genes | {gene}\n\n    def interpolate(self, genes=None, force=False):\n        force_ = force\n\n        if genes is None:\n            genes = self.genes\n\n        pbar = tqdm.tqdm(genes, leave=False)\n\n        for gene in pbar:\n            pbar.set_description(gene)\n            scores_file = self.get_scoring_path(gene) / \"scores.pkl\"\n\n            if not scores_file.exists():\n                continue\n\n            interpolate_file = self.get_scoring_path(gene) / \"interpolated.pkl\"\n\n            force = force_\n            if not interpolate_file.exists():\n                force = True\n\n            if force:\n                scores = pickle.load(scores_file.open(\"rb\"))\n                x = scores[\"deltacor\"].values\n                scores_statistical = []\n                for i in range(x.shape[1]):\n                    scores_statistical.append(\n                        scipy.stats.ttest_1samp(x[:, i], 0, alternative=\"less\").pvalue\n                    )\n                scores_statistical = pd.DataFrame({\"pvalue\": scores_statistical})\n                scores_statistical[\"qval\"] = fdr(scores_statistical[\"pvalue\"])\n\n                plotdata = scores.mean(\"model\").stack().to_dataframe()\n                plotdata = self.design.join(plotdata)\n\n                plotdata[\"qval\"] = scores_statistical[\"qval\"].values\n\n                window_sizes_info = pd.DataFrame(\n                    {\"window_size\": self.design[\"window_size\"].unique()}\n                ).set_index(\"window_size\")\n                window_sizes_info[\"ix\"] = np.arange(len(window_sizes_info))\n\n                # interpolate\n                positions_oi = np.arange(\n                    self.design[\"window_start\"].min(),\n                    self.design[\"window_end\"].max() + 1,\n                )\n\n                deltacor_interpolated = np.zeros(\n                    (len(window_sizes_info), len(positions_oi))\n                )\n                lost_interpolated = np.zeros(\n                    (len(window_sizes_info), len(positions_oi))\n                )\n                effect_interpolated = np.zeros(\n                    (len(window_sizes_info), len(positions_oi))\n                )\n                for window_size, window_size_info in window_sizes_info.iterrows():\n                    plotdata_oi = plotdata.query(\"window_size == @window_size\")\n                    x = plotdata_oi[\"window_mid\"].values.copy()\n                    y = plotdata_oi[\"deltacor\"].values.copy()\n                    y[plotdata_oi[\"qval\"] &gt; 0.1] = 0.0\n                    deltacor_interpolated_ = np.clip(\n                        np.interp(positions_oi, x, y) / window_size * 1000,\n                        -np.inf,\n                        0,\n                        # np.inf,\n                    )\n                    deltacor_interpolated[\n                        window_size_info[\"ix\"], :\n                    ] = deltacor_interpolated_\n\n                    lost_interpolated_ = (\n                        np.interp(\n                            positions_oi, plotdata_oi[\"window_mid\"], plotdata_oi[\"lost\"]\n                        )\n                        / window_size\n                        * 1000\n                    )\n                    lost_interpolated[window_size_info[\"ix\"], :] = lost_interpolated_\n\n                    effect_interpolated_ = (\n                        np.interp(\n                            positions_oi,\n                            plotdata_oi[\"window_mid\"],\n                            plotdata_oi[\"effect\"],\n                        )\n                        / window_size\n                        * 1000\n                    )\n                    effect_interpolated[\n                        window_size_info[\"ix\"], :\n                    ] = effect_interpolated_\n\n                deltacor = xr.DataArray(\n                    deltacor_interpolated.mean(0),\n                    coords=[\n                        (\"position\", positions_oi),\n                    ],\n                )\n                lost = xr.DataArray(\n                    lost_interpolated.mean(0),\n                    coords=[\n                        (\"position\", positions_oi),\n                    ],\n                )\n\n                effect = xr.DataArray(\n                    effect_interpolated.mean(0),\n                    coords=[\n                        (\"position\", positions_oi),\n                    ],\n                )\n\n                # save\n                interpolated = xr.Dataset(\n                    {\"deltacor\": deltacor, \"lost\": lost, \"effect\": effect}\n                )\n                pickle.dump(\n                    interpolated,\n                    interpolate_file.open(\"wb\"),\n                )\n\n    def get_plotdata(self, gene):\n        interpolated_file = self.get_scoring_path(gene) / \"interpolated.pkl\"\n        if not interpolated_file.exists():\n            raise FileNotFoundError(f\"File {interpolated_file} does not exist\")\n\n        interpolated = pickle.load(interpolated_file.open(\"rb\"))\n\n        plotdata = interpolated.to_dataframe()\n\n        return plotdata\n\n    def get_scoring_path(self, gene):\n        path = self.path / f\"{gene}\"\n        path.mkdir(parents=True, exist_ok=True)\n        return path\n</code></pre>"},{"location":"reference/models/pred/interpret/#chromatinhd.models.pred.interpret.genemultiwindow.GeneMultiWindow.design","title":"<code>design = chd.flow.Stored('design')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The design of the censoring windows.</p>"},{"location":"reference/models/pred/interpret/#chromatinhd.models.pred.interpret.genemultiwindow.GeneMultiWindow.genes","title":"<code>genes = chd.flow.Stored('genes', default=set)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The genes that have been scored.</p>"},{"location":"reference/models/pred/interpret/#chromatinhd.models.pred.interpret.GenePairWindow","title":"<code>chromatinhd.models.pred.interpret.GenePairWindow</code>","text":"<p>         Bases: <code>chd.flow.Flow</code></p> <p>Interpret a pred model positionally by censoring windows and comparing the decrease in predictivity per cell between pairs of windows</p> Source code in <code>src/chromatinhd/models/pred/interpret/genepairwindow.py</code> <pre><code>class GenePairWindow(chd.flow.Flow):\n\"\"\"\n    Interpret a *pred* model positionally by censoring windows and comparing the decrease in predictivity per cell between pairs of windows\n    \"\"\"\n\n    design = chd.flow.Stored(\"design\")\n\n    genes = chd.flow.Stored(\"genes\", default=set)\n\n    def score(\n        self,\n        fragments: Fragments,\n        transcriptome: Transcriptome,\n        models: Models,\n        folds: Folds,\n        censorer,\n        genes: Optional[List] = None,\n        force=False,\n        device=default_device,\n    ):\n\"\"\"\n        Score the models\n\n        Parameters:\n            fragments:\n                the fragments\n            transcriptome:\n                the transcriptome\n            models:\n                the models\n            folds:\n                the folds\n            genes:\n                which genes to score, defaults to all\n\n        \"\"\"\n        force_ = force\n        design = censorer.design.iloc[1:].copy()\n        self.design = design\n\n        if genes is None:\n            genes = transcriptome.var.index\n\n        pbar = tqdm.tqdm(genes, leave=False)\n\n        for gene in pbar:\n            pbar.set_description(gene)\n            scores_file = self.get_scoring_path(gene) / \"scores.pkl\"\n            interaction_file = self.get_scoring_path(gene) / \"interaction.pkl\"\n\n            force = force_\n            if not all([file.exists() for file in [scores_file, interaction_file]]):\n                force = True\n\n            if force:\n                deltacor_folds = []\n                copredictivity_folds = []\n                lost_folds = []\n                for fold, model in zip(folds, models):\n                    predicted, expected, n_fragments = model.get_prediction_censored(\n                        fragments,\n                        transcriptome,\n                        censorer,\n                        cell_ixs=np.concatenate(\n                            [fold[\"cells_validation\"], fold[\"cells_test\"]]\n                        ),\n                        genes=[gene],\n                        device=device,\n                    )\n\n                    # select 1st gene, given that we're working with one gene anyway\n                    predicted = predicted[..., 0]\n                    expected = expected[..., 0]\n                    n_fragments = n_fragments[..., 0]\n\n                    # calculate delta cor per cell\n                    # calculate effect per cellxgene combination\n                    predicted_censored = predicted[1:]\n                    predicted_full = predicted[0][None, ...]\n                    predicted_full_norm = zscore(predicted_full, 1)\n                    predicted_censored_norm = zscore_relative(\n                        predicted_censored, predicted_full, 1\n                    )\n\n                    expected_norm = zscore(expected[None, ...], 1)\n\n                    celldeltacor = -np.abs(\n                        predicted_censored_norm - expected_norm\n                    ) - -np.abs(predicted_full_norm - expected_norm)\n                    with np.errstate(divide=\"ignore\", invalid=\"ignore\"):\n                        copredictivity = np.corrcoef(celldeltacor)\n                    copredictivity[np.isnan(copredictivity)] = 0.0\n\n                    copredictivity_folds.append(copredictivity)\n\n                    cor = chd.utils.paircor(predicted, expected, dim=-1)\n                    deltacor = cor[1:] - cor[0]\n\n                    lost = (n_fragments[0] - n_fragments[1:]).mean(-1)\n\n                    deltacor_folds.append(deltacor)\n                    lost_folds.append(lost)\n\n                lost_folds = np.stack(lost_folds, 0)\n                deltacor_folds = np.stack(deltacor_folds, 0)\n                copredictivity_folds = np.stack(copredictivity_folds, 0)\n\n                result = xr.Dataset(\n                    {\n                        \"deltacor\": xr.DataArray(\n                            deltacor_folds,\n                            coords=[\n                                (\"model\", np.arange(len(models))),\n                                (\"window\", design.index),\n                            ],\n                        ),\n                        \"lost\": xr.DataArray(\n                            lost_folds,\n                            coords=[\n                                (\"model\", np.arange(len(models))),\n                                (\"window\", design.index),\n                            ],\n                        ),\n                    }\n                )\n\n                windows_oi = lost_folds.mean(0) &gt; 1e-3\n\n                interaction = xr.DataArray(\n                    copredictivity_folds[:, windows_oi][:, :, windows_oi],\n                    coords=[\n                        (\"model\", np.arange(len(models))),\n                        (\"window1\", design.index[windows_oi]),\n                        (\"window2\", design.index[windows_oi]),\n                    ],\n                )\n\n                pickle.dump(result, scores_file.open(\"wb\"))\n                pickle.dump(interaction, interaction_file.open(\"wb\"))\n\n                self.genes = self.genes | {gene}\n\n    def get_plotdata(self, gene):\n\"\"\"\n        Get plotdata for a gene\n        \"\"\"\n        interaction = pickle.load(\n            open(\n                self.get_scoring_path(gene) / \"interaction.pkl\",\n                \"rb\",\n            )\n        )\n\n        plotdata = interaction.mean(\"model\").to_dataframe(\"cor\").reset_index()\n        plotdata[\"window1\"] = plotdata[\"window1\"].astype(\"category\")\n        plotdata[\"window2\"] = plotdata[\"window2\"].astype(\"category\")\n\n        plotdata = (\n            pd.DataFrame(\n                itertools.combinations(self.design.index, 2),\n                columns=[\"window1\", \"window2\"],\n            )\n            .set_index([\"window1\", \"window2\"])\n            .join(plotdata.set_index([\"window1\", \"window2\"]))\n        )\n        plotdata = plotdata.reset_index().fillna({\"cor\": 0.0})\n        plotdata[\"window_mid1\"] = self.design.loc[plotdata[\"window1\"]][\n            \"window_mid\"\n        ].values\n        plotdata[\"window_mid2\"] = self.design.loc[plotdata[\"window2\"]][\n            \"window_mid\"\n        ].values\n        plotdata[\"dist\"] = np.abs(plotdata[\"window_mid1\"] - plotdata[\"window_mid2\"])\n        plotdata = plotdata.query(\"(window_mid1 &lt; window_mid2)\")\n        # plotdata = plotdata.query(\"dist &gt; 1000\")\n\n        # x = interaction.stack({\"window1_window2\": [\"window1\", \"window2\"]}).values\n        # print(x.shape)\n        # scores_statistical = []\n        # for i in range(x.shape[1]):\n        #     scores_statistical.append(scipy.stats.ttest_1samp(x[:, i], 0).pvalue)\n        # scores_statistical = pd.DataFrame({\"pval\": scores_statistical})\n        # scores_statistical[\"pval\"] = scores_statistical[\"pval\"].fillna(1.0)\n        # scores_statistical[\"qval\"] = fdr(scores_statistical[\"pval\"])\n\n        # plotdata[\"pval\"] = scores_statistical[\"pval\"].values\n        # plotdata[\"qval\"] = scores_statistical[\"qval\"].values\n\n        plotdata.loc[plotdata[\"dist\"] &lt; 1000, \"cor\"] = 0.0\n\n        return plotdata\n\n    def get_scoring_path(self, gene):\n        path = self.path / f\"{gene}\"\n        path.mkdir(parents=True, exist_ok=True)\n        return path\n</code></pre>"},{"location":"reference/models/pred/interpret/#chromatinhd.models.pred.interpret.genepairwindow.GenePairWindow.get_plotdata","title":"<code>get_plotdata(gene)</code>","text":"<p>Get plotdata for a gene</p> Source code in <code>src/chromatinhd/models/pred/interpret/genepairwindow.py</code> <pre><code>def get_plotdata(self, gene):\n\"\"\"\n    Get plotdata for a gene\n    \"\"\"\n    interaction = pickle.load(\n        open(\n            self.get_scoring_path(gene) / \"interaction.pkl\",\n            \"rb\",\n        )\n    )\n\n    plotdata = interaction.mean(\"model\").to_dataframe(\"cor\").reset_index()\n    plotdata[\"window1\"] = plotdata[\"window1\"].astype(\"category\")\n    plotdata[\"window2\"] = plotdata[\"window2\"].astype(\"category\")\n\n    plotdata = (\n        pd.DataFrame(\n            itertools.combinations(self.design.index, 2),\n            columns=[\"window1\", \"window2\"],\n        )\n        .set_index([\"window1\", \"window2\"])\n        .join(plotdata.set_index([\"window1\", \"window2\"]))\n    )\n    plotdata = plotdata.reset_index().fillna({\"cor\": 0.0})\n    plotdata[\"window_mid1\"] = self.design.loc[plotdata[\"window1\"]][\n        \"window_mid\"\n    ].values\n    plotdata[\"window_mid2\"] = self.design.loc[plotdata[\"window2\"]][\n        \"window_mid\"\n    ].values\n    plotdata[\"dist\"] = np.abs(plotdata[\"window_mid1\"] - plotdata[\"window_mid2\"])\n    plotdata = plotdata.query(\"(window_mid1 &lt; window_mid2)\")\n    # plotdata = plotdata.query(\"dist &gt; 1000\")\n\n    # x = interaction.stack({\"window1_window2\": [\"window1\", \"window2\"]}).values\n    # print(x.shape)\n    # scores_statistical = []\n    # for i in range(x.shape[1]):\n    #     scores_statistical.append(scipy.stats.ttest_1samp(x[:, i], 0).pvalue)\n    # scores_statistical = pd.DataFrame({\"pval\": scores_statistical})\n    # scores_statistical[\"pval\"] = scores_statistical[\"pval\"].fillna(1.0)\n    # scores_statistical[\"qval\"] = fdr(scores_statistical[\"pval\"])\n\n    # plotdata[\"pval\"] = scores_statistical[\"pval\"].values\n    # plotdata[\"qval\"] = scores_statistical[\"qval\"].values\n\n    plotdata.loc[plotdata[\"dist\"] &lt; 1000, \"cor\"] = 0.0\n\n    return plotdata\n</code></pre>"},{"location":"reference/models/pred/interpret/#chromatinhd.models.pred.interpret.genepairwindow.GenePairWindow.score","title":"<code>score(fragments, transcriptome, models, folds, censorer, genes=None, force=False, device=default_device)</code>","text":"<p>Score the models</p> <p>Parameters:</p> Name Type Description Default <code>fragments</code> <code>Fragments</code> <p>the fragments</p> required <code>transcriptome</code> <code>Transcriptome</code> <p>the transcriptome</p> required <code>models</code> <code>Models</code> <p>the models</p> required <code>folds</code> <code>Folds</code> <p>the folds</p> required <code>genes</code> <code>Optional[List]</code> <p>which genes to score, defaults to all</p> <code>None</code> Source code in <code>src/chromatinhd/models/pred/interpret/genepairwindow.py</code> <pre><code>def score(\n    self,\n    fragments: Fragments,\n    transcriptome: Transcriptome,\n    models: Models,\n    folds: Folds,\n    censorer,\n    genes: Optional[List] = None,\n    force=False,\n    device=default_device,\n):\n\"\"\"\n    Score the models\n\n    Parameters:\n        fragments:\n            the fragments\n        transcriptome:\n            the transcriptome\n        models:\n            the models\n        folds:\n            the folds\n        genes:\n            which genes to score, defaults to all\n\n    \"\"\"\n    force_ = force\n    design = censorer.design.iloc[1:].copy()\n    self.design = design\n\n    if genes is None:\n        genes = transcriptome.var.index\n\n    pbar = tqdm.tqdm(genes, leave=False)\n\n    for gene in pbar:\n        pbar.set_description(gene)\n        scores_file = self.get_scoring_path(gene) / \"scores.pkl\"\n        interaction_file = self.get_scoring_path(gene) / \"interaction.pkl\"\n\n        force = force_\n        if not all([file.exists() for file in [scores_file, interaction_file]]):\n            force = True\n\n        if force:\n            deltacor_folds = []\n            copredictivity_folds = []\n            lost_folds = []\n            for fold, model in zip(folds, models):\n                predicted, expected, n_fragments = model.get_prediction_censored(\n                    fragments,\n                    transcriptome,\n                    censorer,\n                    cell_ixs=np.concatenate(\n                        [fold[\"cells_validation\"], fold[\"cells_test\"]]\n                    ),\n                    genes=[gene],\n                    device=device,\n                )\n\n                # select 1st gene, given that we're working with one gene anyway\n                predicted = predicted[..., 0]\n                expected = expected[..., 0]\n                n_fragments = n_fragments[..., 0]\n\n                # calculate delta cor per cell\n                # calculate effect per cellxgene combination\n                predicted_censored = predicted[1:]\n                predicted_full = predicted[0][None, ...]\n                predicted_full_norm = zscore(predicted_full, 1)\n                predicted_censored_norm = zscore_relative(\n                    predicted_censored, predicted_full, 1\n                )\n\n                expected_norm = zscore(expected[None, ...], 1)\n\n                celldeltacor = -np.abs(\n                    predicted_censored_norm - expected_norm\n                ) - -np.abs(predicted_full_norm - expected_norm)\n                with np.errstate(divide=\"ignore\", invalid=\"ignore\"):\n                    copredictivity = np.corrcoef(celldeltacor)\n                copredictivity[np.isnan(copredictivity)] = 0.0\n\n                copredictivity_folds.append(copredictivity)\n\n                cor = chd.utils.paircor(predicted, expected, dim=-1)\n                deltacor = cor[1:] - cor[0]\n\n                lost = (n_fragments[0] - n_fragments[1:]).mean(-1)\n\n                deltacor_folds.append(deltacor)\n                lost_folds.append(lost)\n\n            lost_folds = np.stack(lost_folds, 0)\n            deltacor_folds = np.stack(deltacor_folds, 0)\n            copredictivity_folds = np.stack(copredictivity_folds, 0)\n\n            result = xr.Dataset(\n                {\n                    \"deltacor\": xr.DataArray(\n                        deltacor_folds,\n                        coords=[\n                            (\"model\", np.arange(len(models))),\n                            (\"window\", design.index),\n                        ],\n                    ),\n                    \"lost\": xr.DataArray(\n                        lost_folds,\n                        coords=[\n                            (\"model\", np.arange(len(models))),\n                            (\"window\", design.index),\n                        ],\n                    ),\n                }\n            )\n\n            windows_oi = lost_folds.mean(0) &gt; 1e-3\n\n            interaction = xr.DataArray(\n                copredictivity_folds[:, windows_oi][:, :, windows_oi],\n                coords=[\n                    (\"model\", np.arange(len(models))),\n                    (\"window1\", design.index[windows_oi]),\n                    (\"window2\", design.index[windows_oi]),\n                ],\n            )\n\n            pickle.dump(result, scores_file.open(\"wb\"))\n            pickle.dump(interaction, interaction_file.open(\"wb\"))\n\n            self.genes = self.genes | {gene}\n</code></pre>"},{"location":"reference/models/pred/model/","title":"Model","text":""},{"location":"reference/models/pred/model/#additive","title":"Additive","text":""},{"location":"reference/models/pred/model/#chromatinhd.models.pred.model.additive.Model","title":"<code>chromatinhd.models.pred.model.additive.Model</code>","text":"<p>         Bases: <code>torch.nn.Module</code>, <code>HybridModel</code></p> <p>Predicting gene expression from raw fragments using an additive model across fragments from the same cell</p> <p>Parameters:</p> Name Type Description Default <code>n_genes</code> <code>int</code> <p>the number of genes</p> required <code>dummy</code> <code>bool</code> <p>whether to use a dummy model that just counts fragments</p> <code>False</code> <code>n_frequencies</code> <code>int</code> <p>the number of frequencies to use for sine encoding</p> <code>50</code> <code>reduce</code> <code>str</code> <p>the reduction to use for pooling fragments across genes and cells</p> <code>'sum'</code> <code>nonlinear</code> <code>bool</code> <p>whether to use a non-linear activation function</p> <code>True</code> <code>n_embedding_dimensions</code> <code>int</code> <p>the number of embedding dimensions</p> <code>10</code> <code>dropout_rate</code> <code>float</code> <p>the dropout rate</p> <code>0.0</code> Source code in <code>src/chromatinhd/models/pred/model/additive.py</code> <pre><code>class Model(torch.nn.Module, HybridModel):\n\"\"\"\n    Predicting gene expression from raw fragments using an additive model across fragments from the same cell\n\n    Parameters:\n        n_genes:\n            the number of genes\n        dummy:\n            whether to use a dummy model that just counts fragments\n        n_frequencies:\n            the number of frequencies to use for sine encoding\n        reduce:\n            the reduction to use for pooling fragments across genes and cells\n        nonlinear:\n            whether to use a non-linear activation function\n        n_embedding_dimensions:\n            the number of embedding dimensions\n        dropout_rate:\n            the dropout rate\n    \"\"\"\n\n    def __init__(\n        self,\n        n_genes: int,\n        dummy: bool = False,\n        n_frequencies: int = 50,\n        reduce: str = \"sum\",\n        nonlinear: bool = True,\n        n_embedding_dimensions: int = 10,\n        dropout_rate: float = 0.0,\n        embedding_to_expression_initialization: str = \"default\",\n        **kwargs: Any,\n    ) -&gt; None:\n        super().__init__()\n\n        if dummy:\n            self.fragment_embedder = FragmentEmbedderCounter()\n        else:\n            self.fragment_embedder = FragmentEmbedder(\n                n_frequencies=n_frequencies,\n                n_genes=n_genes,\n                nonlinear=nonlinear,\n                n_embedding_dimensions=n_embedding_dimensions,\n                dropout_rate=dropout_rate,\n            )\n        self.embedding_gene_pooler = EmbeddingGenePooler(reduce=reduce)\n        self.embedding_to_expression = EmbeddingToExpression(\n            n_genes=n_genes,\n            n_embedding_dimensions=self.fragment_embedder.n_embedding_dimensions,\n            initialization=embedding_to_expression_initialization,\n        )\n\n    def forward(self, data):\n\"\"\"\n        Make a prediction given a data object\n        \"\"\"\n        fragment_embedding = self.fragment_embedder(\n            data.fragments.coordinates, data.fragments.genemapping\n        )\n        cell_gene_embedding = self.embedding_gene_pooler(\n            fragment_embedding,\n            data.fragments.local_cellxgene_ix,\n            data.minibatch.n_cells,\n            data.minibatch.n_genes,\n        )\n        expression_predicted = self.embedding_to_expression(\n            cell_gene_embedding, data.minibatch.genes_oi_torch\n        )\n        return expression_predicted\n\n    def forward_loss(self, data):\n\"\"\"\n        Make a prediction and calculate the loss given a data object\n        \"\"\"\n        expression_predicted = self.forward(data)\n        expression_true = data.transcriptome.value\n        return paircor_loss(expression_predicted, expression_true)\n\n    def forward_gene_loss(self, data):\n\"\"\"\n        Make a prediction and calculate the loss given a data object\n        \"\"\"\n        expression_predicted = self.forward(data)\n        expression_true = data.transcriptome.value\n        return gene_paircor_loss(expression_predicted, expression_true)\n\n    def forward_multiple(self, data, fragments_oi, min_fragments=1):\n        fragment_embedding = self.fragment_embedder(\n            data.fragments.coordinates, data.fragments.genemapping\n        )\n\n        total_n_fragments = torch.bincount(\n            data.fragments.local_cellxgene_ix,\n            minlength=data.minibatch.n_genes * data.minibatch.n_cells,\n        ).reshape((data.minibatch.n_cells, data.minibatch.n_genes))\n\n        total_cell_gene_embedding = self.embedding_gene_pooler.forward(\n            fragment_embedding,\n            data.fragments.local_cellxgene_ix,\n            data.minibatch.n_cells,\n            data.minibatch.n_genes,\n        )\n\n        total_expression_predicted = self.embedding_to_expression.forward(\n            total_cell_gene_embedding, data.minibatch.genes_oi_torch\n        )\n\n        for fragments_oi_ in fragments_oi:\n            if (fragments_oi_ is not None) and ((~fragments_oi_).sum() &gt; min_fragments):\n                lost_fragments_oi = ~fragments_oi_\n                lost_local_cellxgene_ix = data.fragments.local_cellxgene_ix[\n                    lost_fragments_oi\n                ]\n                n_fragments = total_n_fragments - torch.bincount(\n                    lost_local_cellxgene_ix,\n                    minlength=data.minibatch.n_genes * data.minibatch.n_cells,\n                ).reshape((data.minibatch.n_cells, data.minibatch.n_genes))\n                cell_gene_embedding = (\n                    total_cell_gene_embedding\n                    - self.embedding_gene_pooler.forward(\n                        fragment_embedding[lost_fragments_oi],\n                        lost_local_cellxgene_ix,\n                        data.minibatch.n_cells,\n                        data.minibatch.n_genes,\n                    )\n                )\n\n                expression_predicted = self.embedding_to_expression.forward(\n                    cell_gene_embedding, data.minibatch.genes_oi_torch\n                )\n            else:\n                n_fragments = total_n_fragments\n                expression_predicted = total_expression_predicted\n\n            yield expression_predicted, n_fragments\n\n    def train_model(\n        self,\n        fragments: Fragments,\n        transcriptome: Transcriptome,\n        fold: list,\n        device=default_device,\n        lr=1e-2,\n        n_epochs=30,\n    ):\n\"\"\"\n        Train the model\n        \"\"\"\n        # set up minibatchers and loaders\n        minibatcher_train = Minibatcher(\n            fold[\"cells_train\"],\n            range(fragments.n_genes),\n            n_genes_step=500,\n            n_cells_step=200,\n        )\n        minibatcher_validation = Minibatcher(\n            fold[\"cells_validation\"],\n            range(fragments.n_genes),\n            n_genes_step=10,\n            n_cells_step=10000,\n            permute_cells=False,\n            permute_genes=False,\n        )\n\n        loaders_train = LoaderPool(\n            TranscriptomeFragments,\n            dict(\n                transcriptome=transcriptome,\n                fragments=fragments,\n                cellxgene_batch_size=minibatcher_train.cellxgene_batch_size,\n            ),\n            n_workers=10,\n        )\n        loaders_validation = LoaderPool(\n            TranscriptomeFragments,\n            dict(\n                transcriptome=transcriptome,\n                fragments=fragments,\n                cellxgene_batch_size=minibatcher_validation.cellxgene_batch_size,\n            ),\n            n_workers=5,\n        )\n\n        trainer = Trainer(\n            self,\n            loaders_train,\n            loaders_validation,\n            minibatcher_train,\n            minibatcher_validation,\n            SparseDenseAdam(\n                self.parameters_sparse(),\n                self.parameters_dense(),\n                lr=lr,\n                weight_decay=1e-5,\n            ),\n            n_epochs=n_epochs,\n            checkpoint_every_epoch=1,\n            optimize_every_step=1,\n            device=device,\n        )\n\n        trainer.train()\n        # trainer.trace.plot()\n\n    def get_prediction(\n        self,\n        fragments,\n        transcriptome,\n        cells=None,\n        cell_ixs=None,\n        genes=None,\n        gene_ixs=None,\n        device=default_device,\n        return_raw=False,\n    ):\n\"\"\"\n        Returns the prediction of a dataset\n        \"\"\"\n        if cell_ixs is None:\n            if cells is None:\n                cells = fragments.obs.index\n            fragments.obs[\"ix\"] = np.arange(len(fragments.obs))\n            cell_ixs = fragments.obs.loc[cells][\"ix\"].values\n        if cells is None:\n            cells = fragments.obs.index[cell_ixs]\n\n        if gene_ixs is None:\n            if genes is None:\n                genes = fragments.var.index\n            fragments.var[\"ix\"] = np.arange(len(fragments.var))\n            gene_ixs = fragments.var.loc[genes][\"ix\"].values\n        if genes is None:\n            genes = fragments.var.index[gene_ixs]\n\n        minibatches = Minibatcher(\n            cell_ixs,\n            gene_ixs,\n            n_genes_step=500,\n            n_cells_step=200,\n            use_all_cells=True,\n            use_all_genes=True,\n            permute_cells=False,\n            permute_genes=False,\n        )\n        loaders = LoaderPool(\n            TranscriptomeFragments,\n            dict(\n                transcriptome=transcriptome,\n                fragments=fragments,\n                cellxgene_batch_size=minibatches.cellxgene_batch_size,\n            ),\n            n_workers=5,\n        )\n        loaders.initialize(minibatches)\n\n        predicted = np.zeros((len(cell_ixs), len(gene_ixs)))\n        expected = np.zeros((len(cell_ixs), len(gene_ixs)))\n        n_fragments = np.zeros((len(cell_ixs), len(gene_ixs)))\n\n        cell_mapping = np.zeros(fragments.n_cells, dtype=np.int64)\n        cell_mapping[cell_ixs] = np.arange(len(cell_ixs))\n\n        gene_mapping = np.zeros(fragments.n_genes, dtype=np.int64)\n        gene_mapping[gene_ixs] = np.arange(len(gene_ixs))\n\n        self.eval()\n        self = self.to(device)\n\n        for data in loaders:\n            data = data.to(device)\n            with torch.no_grad():\n                pred_mb = self.forward(data)\n            predicted[\n                np.ix_(cell_mapping[data.minibatch.cells_oi], data.minibatch.genes_oi)\n            ] = pred_mb.cpu().numpy()\n            expected[\n                np.ix_(cell_mapping[data.minibatch.cells_oi], data.minibatch.genes_oi)\n            ] = data.transcriptome.value.cpu().numpy()\n            n_fragments[\n                np.ix_(cell_mapping[data.minibatch.cells_oi], data.minibatch.genes_oi)\n            ] = (\n                torch.bincount(\n                    data.fragments.local_cellxgene_ix,\n                    minlength=len(data.minibatch.cells_oi)\n                    * len(data.minibatch.genes_oi),\n                )\n                .reshape(len(data.minibatch.cells_oi), len(data.minibatch.genes_oi))\n                .cpu()\n                .numpy()\n            )\n\n        self = self.to(\"cpu\")\n\n        if return_raw:\n            return predicted, expected, n_fragments\n\n        result = xr.Dataset(\n            {\n                \"predicted\": xr.DataArray(\n                    predicted,\n                    dims=(\"cell\", \"gene\"),\n                    coords={\"cell\": cells, \"gene\": genes},\n                ),\n                \"expected\": xr.DataArray(\n                    expected,\n                    dims=(\"cell\", \"gene\"),\n                    coords={\"cell\": cells, \"gene\": genes},\n                ),\n                \"n_fragments\": xr.DataArray(\n                    n_fragments,\n                    dims=(\"cell\", \"gene\"),\n                    coords={\"cell\": cells, \"gene\": genes},\n                ),\n            }\n        )\n        return result\n\n    def get_prediction_censored(\n        self,\n        fragments,\n        transcriptome,\n        censorer,\n        cells=None,\n        cell_ixs=None,\n        genes=None,\n        gene_ixs=None,\n        device=default_device,\n    ):\n\"\"\"\n        Returns the prediction of multiple censored dataset\n        \"\"\"\n        if cell_ixs is None:\n            if cells is None:\n                cells = fragments.obs.index\n            fragments.obs[\"ix\"] = np.arange(len(fragments.obs))\n            cell_ixs = fragments.obs.loc[cells][\"ix\"].values\n        if cells is None:\n            cells = fragments.obs.index[cell_ixs]\n\n        if gene_ixs is None:\n            if genes is None:\n                genes = fragments.var.index\n            fragments.var[\"ix\"] = np.arange(len(fragments.var))\n            gene_ixs = fragments.var.loc[genes][\"ix\"].values\n        if genes is None:\n            genes = fragments.var.index[gene_ixs]\n\n        minibatcher = Minibatcher(\n            cell_ixs,\n            gene_ixs,\n            n_genes_step=500,\n            n_cells_step=5000,\n            use_all_cells=True,\n            use_all_genes=True,\n            permute_cells=False,\n            permute_genes=False,\n        )\n        loaders = LoaderPool(\n            TranscriptomeFragments,\n            dict(\n                transcriptome=transcriptome,\n                fragments=fragments,\n                cellxgene_batch_size=minibatcher.cellxgene_batch_size,\n            ),\n            n_workers=10,\n        )\n        loaders.initialize(minibatcher)\n\n        predicted = np.zeros((len(censorer), len(cell_ixs), len(gene_ixs)), dtype=float)\n        expected = np.zeros((len(cell_ixs), len(gene_ixs)), dtype=float)\n        n_fragments = np.zeros((len(censorer), len(cell_ixs), len(gene_ixs)), dtype=int)\n\n        cell_mapping = np.zeros(fragments.n_cells, dtype=np.int64)\n        cell_mapping[cell_ixs] = np.arange(len(cell_ixs))\n        gene_mapping = np.zeros(fragments.n_genes, dtype=np.int64)\n        gene_mapping[gene_ixs] = np.arange(len(gene_ixs))\n\n        self.eval()\n        self.to(device)\n        for data in loaders:\n            data = data.to(device)\n            fragments_oi = censorer(data)\n\n            with torch.no_grad():\n                for design_ix, (\n                    pred_mb,\n                    n_fragments_oi_mb,\n                ) in enumerate(self.forward_multiple(data, fragments_oi)):\n                    ix = np.ix_(\n                        [design_ix],\n                        cell_mapping[data.minibatch.cells_oi],\n                        gene_mapping[data.minibatch.genes_oi],\n                    )\n                    predicted[ix] = pred_mb.cpu().numpy()\n                    n_fragments[ix] = n_fragments_oi_mb.cpu().numpy()\n            expected[\n                np.ix_(\n                    cell_mapping[data.minibatch.cells_oi],\n                    gene_mapping[data.minibatch.genes_oi],\n                )\n            ] = data.transcriptome.value.cpu().numpy()\n\n        self.to(\"cpu\")\n\n        return predicted, expected, n_fragments\n</code></pre>"},{"location":"reference/models/pred/model/#chromatinhd.models.pred.model.additive.Model.forward","title":"<code>forward(data)</code>","text":"<p>Make a prediction given a data object</p> Source code in <code>src/chromatinhd/models/pred/model/additive.py</code> <pre><code>def forward(self, data):\n\"\"\"\n    Make a prediction given a data object\n    \"\"\"\n    fragment_embedding = self.fragment_embedder(\n        data.fragments.coordinates, data.fragments.genemapping\n    )\n    cell_gene_embedding = self.embedding_gene_pooler(\n        fragment_embedding,\n        data.fragments.local_cellxgene_ix,\n        data.minibatch.n_cells,\n        data.minibatch.n_genes,\n    )\n    expression_predicted = self.embedding_to_expression(\n        cell_gene_embedding, data.minibatch.genes_oi_torch\n    )\n    return expression_predicted\n</code></pre>"},{"location":"reference/models/pred/model/#chromatinhd.models.pred.model.additive.Model.forward_gene_loss","title":"<code>forward_gene_loss(data)</code>","text":"<p>Make a prediction and calculate the loss given a data object</p> Source code in <code>src/chromatinhd/models/pred/model/additive.py</code> <pre><code>def forward_gene_loss(self, data):\n\"\"\"\n    Make a prediction and calculate the loss given a data object\n    \"\"\"\n    expression_predicted = self.forward(data)\n    expression_true = data.transcriptome.value\n    return gene_paircor_loss(expression_predicted, expression_true)\n</code></pre>"},{"location":"reference/models/pred/model/#chromatinhd.models.pred.model.additive.Model.forward_loss","title":"<code>forward_loss(data)</code>","text":"<p>Make a prediction and calculate the loss given a data object</p> Source code in <code>src/chromatinhd/models/pred/model/additive.py</code> <pre><code>def forward_loss(self, data):\n\"\"\"\n    Make a prediction and calculate the loss given a data object\n    \"\"\"\n    expression_predicted = self.forward(data)\n    expression_true = data.transcriptome.value\n    return paircor_loss(expression_predicted, expression_true)\n</code></pre>"},{"location":"reference/models/pred/model/#chromatinhd.models.pred.model.additive.Model.get_prediction","title":"<code>get_prediction(fragments, transcriptome, cells=None, cell_ixs=None, genes=None, gene_ixs=None, device=default_device, return_raw=False)</code>","text":"<p>Returns the prediction of a dataset</p> Source code in <code>src/chromatinhd/models/pred/model/additive.py</code> <pre><code>def get_prediction(\n    self,\n    fragments,\n    transcriptome,\n    cells=None,\n    cell_ixs=None,\n    genes=None,\n    gene_ixs=None,\n    device=default_device,\n    return_raw=False,\n):\n\"\"\"\n    Returns the prediction of a dataset\n    \"\"\"\n    if cell_ixs is None:\n        if cells is None:\n            cells = fragments.obs.index\n        fragments.obs[\"ix\"] = np.arange(len(fragments.obs))\n        cell_ixs = fragments.obs.loc[cells][\"ix\"].values\n    if cells is None:\n        cells = fragments.obs.index[cell_ixs]\n\n    if gene_ixs is None:\n        if genes is None:\n            genes = fragments.var.index\n        fragments.var[\"ix\"] = np.arange(len(fragments.var))\n        gene_ixs = fragments.var.loc[genes][\"ix\"].values\n    if genes is None:\n        genes = fragments.var.index[gene_ixs]\n\n    minibatches = Minibatcher(\n        cell_ixs,\n        gene_ixs,\n        n_genes_step=500,\n        n_cells_step=200,\n        use_all_cells=True,\n        use_all_genes=True,\n        permute_cells=False,\n        permute_genes=False,\n    )\n    loaders = LoaderPool(\n        TranscriptomeFragments,\n        dict(\n            transcriptome=transcriptome,\n            fragments=fragments,\n            cellxgene_batch_size=minibatches.cellxgene_batch_size,\n        ),\n        n_workers=5,\n    )\n    loaders.initialize(minibatches)\n\n    predicted = np.zeros((len(cell_ixs), len(gene_ixs)))\n    expected = np.zeros((len(cell_ixs), len(gene_ixs)))\n    n_fragments = np.zeros((len(cell_ixs), len(gene_ixs)))\n\n    cell_mapping = np.zeros(fragments.n_cells, dtype=np.int64)\n    cell_mapping[cell_ixs] = np.arange(len(cell_ixs))\n\n    gene_mapping = np.zeros(fragments.n_genes, dtype=np.int64)\n    gene_mapping[gene_ixs] = np.arange(len(gene_ixs))\n\n    self.eval()\n    self = self.to(device)\n\n    for data in loaders:\n        data = data.to(device)\n        with torch.no_grad():\n            pred_mb = self.forward(data)\n        predicted[\n            np.ix_(cell_mapping[data.minibatch.cells_oi], data.minibatch.genes_oi)\n        ] = pred_mb.cpu().numpy()\n        expected[\n            np.ix_(cell_mapping[data.minibatch.cells_oi], data.minibatch.genes_oi)\n        ] = data.transcriptome.value.cpu().numpy()\n        n_fragments[\n            np.ix_(cell_mapping[data.minibatch.cells_oi], data.minibatch.genes_oi)\n        ] = (\n            torch.bincount(\n                data.fragments.local_cellxgene_ix,\n                minlength=len(data.minibatch.cells_oi)\n                * len(data.minibatch.genes_oi),\n            )\n            .reshape(len(data.minibatch.cells_oi), len(data.minibatch.genes_oi))\n            .cpu()\n            .numpy()\n        )\n\n    self = self.to(\"cpu\")\n\n    if return_raw:\n        return predicted, expected, n_fragments\n\n    result = xr.Dataset(\n        {\n            \"predicted\": xr.DataArray(\n                predicted,\n                dims=(\"cell\", \"gene\"),\n                coords={\"cell\": cells, \"gene\": genes},\n            ),\n            \"expected\": xr.DataArray(\n                expected,\n                dims=(\"cell\", \"gene\"),\n                coords={\"cell\": cells, \"gene\": genes},\n            ),\n            \"n_fragments\": xr.DataArray(\n                n_fragments,\n                dims=(\"cell\", \"gene\"),\n                coords={\"cell\": cells, \"gene\": genes},\n            ),\n        }\n    )\n    return result\n</code></pre>"},{"location":"reference/models/pred/model/#chromatinhd.models.pred.model.additive.Model.get_prediction_censored","title":"<code>get_prediction_censored(fragments, transcriptome, censorer, cells=None, cell_ixs=None, genes=None, gene_ixs=None, device=default_device)</code>","text":"<p>Returns the prediction of multiple censored dataset</p> Source code in <code>src/chromatinhd/models/pred/model/additive.py</code> <pre><code>def get_prediction_censored(\n    self,\n    fragments,\n    transcriptome,\n    censorer,\n    cells=None,\n    cell_ixs=None,\n    genes=None,\n    gene_ixs=None,\n    device=default_device,\n):\n\"\"\"\n    Returns the prediction of multiple censored dataset\n    \"\"\"\n    if cell_ixs is None:\n        if cells is None:\n            cells = fragments.obs.index\n        fragments.obs[\"ix\"] = np.arange(len(fragments.obs))\n        cell_ixs = fragments.obs.loc[cells][\"ix\"].values\n    if cells is None:\n        cells = fragments.obs.index[cell_ixs]\n\n    if gene_ixs is None:\n        if genes is None:\n            genes = fragments.var.index\n        fragments.var[\"ix\"] = np.arange(len(fragments.var))\n        gene_ixs = fragments.var.loc[genes][\"ix\"].values\n    if genes is None:\n        genes = fragments.var.index[gene_ixs]\n\n    minibatcher = Minibatcher(\n        cell_ixs,\n        gene_ixs,\n        n_genes_step=500,\n        n_cells_step=5000,\n        use_all_cells=True,\n        use_all_genes=True,\n        permute_cells=False,\n        permute_genes=False,\n    )\n    loaders = LoaderPool(\n        TranscriptomeFragments,\n        dict(\n            transcriptome=transcriptome,\n            fragments=fragments,\n            cellxgene_batch_size=minibatcher.cellxgene_batch_size,\n        ),\n        n_workers=10,\n    )\n    loaders.initialize(minibatcher)\n\n    predicted = np.zeros((len(censorer), len(cell_ixs), len(gene_ixs)), dtype=float)\n    expected = np.zeros((len(cell_ixs), len(gene_ixs)), dtype=float)\n    n_fragments = np.zeros((len(censorer), len(cell_ixs), len(gene_ixs)), dtype=int)\n\n    cell_mapping = np.zeros(fragments.n_cells, dtype=np.int64)\n    cell_mapping[cell_ixs] = np.arange(len(cell_ixs))\n    gene_mapping = np.zeros(fragments.n_genes, dtype=np.int64)\n    gene_mapping[gene_ixs] = np.arange(len(gene_ixs))\n\n    self.eval()\n    self.to(device)\n    for data in loaders:\n        data = data.to(device)\n        fragments_oi = censorer(data)\n\n        with torch.no_grad():\n            for design_ix, (\n                pred_mb,\n                n_fragments_oi_mb,\n            ) in enumerate(self.forward_multiple(data, fragments_oi)):\n                ix = np.ix_(\n                    [design_ix],\n                    cell_mapping[data.minibatch.cells_oi],\n                    gene_mapping[data.minibatch.genes_oi],\n                )\n                predicted[ix] = pred_mb.cpu().numpy()\n                n_fragments[ix] = n_fragments_oi_mb.cpu().numpy()\n        expected[\n            np.ix_(\n                cell_mapping[data.minibatch.cells_oi],\n                gene_mapping[data.minibatch.genes_oi],\n            )\n        ] = data.transcriptome.value.cpu().numpy()\n\n    self.to(\"cpu\")\n\n    return predicted, expected, n_fragments\n</code></pre>"},{"location":"reference/models/pred/model/#chromatinhd.models.pred.model.additive.Model.train_model","title":"<code>train_model(fragments, transcriptome, fold, device=default_device, lr=0.01, n_epochs=30)</code>","text":"<p>Train the model</p> Source code in <code>src/chromatinhd/models/pred/model/additive.py</code> <pre><code>def train_model(\n    self,\n    fragments: Fragments,\n    transcriptome: Transcriptome,\n    fold: list,\n    device=default_device,\n    lr=1e-2,\n    n_epochs=30,\n):\n\"\"\"\n    Train the model\n    \"\"\"\n    # set up minibatchers and loaders\n    minibatcher_train = Minibatcher(\n        fold[\"cells_train\"],\n        range(fragments.n_genes),\n        n_genes_step=500,\n        n_cells_step=200,\n    )\n    minibatcher_validation = Minibatcher(\n        fold[\"cells_validation\"],\n        range(fragments.n_genes),\n        n_genes_step=10,\n        n_cells_step=10000,\n        permute_cells=False,\n        permute_genes=False,\n    )\n\n    loaders_train = LoaderPool(\n        TranscriptomeFragments,\n        dict(\n            transcriptome=transcriptome,\n            fragments=fragments,\n            cellxgene_batch_size=minibatcher_train.cellxgene_batch_size,\n        ),\n        n_workers=10,\n    )\n    loaders_validation = LoaderPool(\n        TranscriptomeFragments,\n        dict(\n            transcriptome=transcriptome,\n            fragments=fragments,\n            cellxgene_batch_size=minibatcher_validation.cellxgene_batch_size,\n        ),\n        n_workers=5,\n    )\n\n    trainer = Trainer(\n        self,\n        loaders_train,\n        loaders_validation,\n        minibatcher_train,\n        minibatcher_validation,\n        SparseDenseAdam(\n            self.parameters_sparse(),\n            self.parameters_dense(),\n            lr=lr,\n            weight_decay=1e-5,\n        ),\n        n_epochs=n_epochs,\n        checkpoint_every_epoch=1,\n        optimize_every_step=1,\n        device=device,\n    )\n\n    trainer.train()\n</code></pre>"},{"location":"reference/models/pred/model/#chromatinhd.models.pred.model.additive.Models","title":"<code>chromatinhd.models.pred.model.additive.Models</code>","text":"<p>         Bases: <code>Flow</code></p> Source code in <code>src/chromatinhd/models/pred/model/additive.py</code> <pre><code>class Models(Flow):\n    n_models = Stored(\"n_models\")\n\n    @property\n    def models_path(self):\n        path = self.path / \"models\"\n        path.mkdir(exist_ok=True)\n        return path\n\n    def train_models(self, fragments, transcriptome, folds, device=default_device):\n        self.n_models = len(folds)\n        for fold_ix, fold in [(fold_ix, fold) for fold_ix, fold in enumerate(folds)]:\n            desired_outputs = [self.models_path / (\"model_\" + str(fold_ix) + \".pkl\")]\n            force = False\n            if not all([desired_output.exists() for desired_output in desired_outputs]):\n                force = True\n\n            if force:\n                model = Model(\n                    n_genes=fragments.n_genes,\n                )\n                model.train_model(fragments, transcriptome, fold, device=device)\n\n                model = model.to(\"cpu\")\n\n                pickle.dump(\n                    model,\n                    open(self.models_path / (\"model_\" + str(fold_ix) + \".pkl\"), \"wb\"),\n                )\n\n    def __getitem__(self, ix):\n        return pickle.load(\n            (self.models_path / (\"model_\" + str(ix) + \".pkl\")).open(\"rb\")\n        )\n\n    def __len__(self):\n        return self.n_models\n\n    def __iter__(self):\n        for ix in range(len(self)):\n            yield self[ix]\n\n    def get_gene_cors(self, fragments, transcriptome, folds, device=default_device):\n        cor_predicted = np.zeros((len(fragments.var.index), len(folds)))\n        cor_n_fragments = np.zeros((len(fragments.var.index), len(folds)))\n        n_fragments = np.zeros((len(fragments.var.index), len(folds)))\n        for model_ix, (model, fold) in enumerate(zip(self, folds)):\n            prediction = model.get_prediction(\n                fragments, transcriptome, cell_ixs=fold[\"cells_test\"], device=device\n            )\n\n            cor_predicted[:, model_ix] = paircor(\n                prediction[\"predicted\"].values, prediction[\"expected\"].values\n            )\n            cor_n_fragments[:, model_ix] = paircor(\n                prediction[\"n_fragments\"].values, prediction[\"expected\"].values\n            )\n\n            n_fragments[:, model_ix] = prediction[\"n_fragments\"].values.sum(0)\n        cor_predicted = pd.Series(\n            cor_predicted.mean(1), index=fragments.var.index, name=\"cor_predicted\"\n        )\n        cor_n_fragments = pd.Series(\n            cor_n_fragments.mean(1), index=fragments.var.index, name=\"cor_n_fragments\"\n        )\n        n_fragments = pd.Series(\n            n_fragments.mean(1), index=fragments.var.index, name=\"n_fragments\"\n        )\n        result = pd.concat([cor_predicted, cor_n_fragments, n_fragments], axis=1)\n        result[\"deltacor\"] = result[\"cor_predicted\"] - result[\"cor_n_fragments\"]\n\n        return result\n</code></pre>"},{"location":"reference/models/pred/plot/","title":"Plot","text":""},{"location":"reference/models/pred/plot/#chromatinhd.models.pred.plot","title":"<code>chromatinhd.models.pred.plot</code>","text":""},{"location":"reference/models/pred/plot/#chromatinhd.models.pred.plot.Copredictivity","title":"<code>Copredictivity</code>","text":"<p>         Bases: <code>chromatinhd.grid.Panel</code></p> <p>Plot co-predictivity of a gene.</p> Source code in <code>src/chromatinhd/models/pred/plot/copredictivity.py</code> <pre><code>class Copredictivity(chromatinhd.grid.Panel):\n\"\"\"\n    Plot co-predictivity of a gene.\n    \"\"\"\n\n    def __init__(self, plotdata, width):\n        super().__init__((width, width / 2))\n\n        norm = mpl.colors.CenteredNorm(0, np.abs(plotdata[\"cor\"]).max())\n        cmap = mpl.cm.RdBu_r\n\n        chromatinhd.plot.matshow45(\n            self.ax,\n            plotdata.set_index([\"window_mid1\", \"window_mid2\"])[\"cor\"],\n            cmap=cmap,\n            norm=norm,\n            radius=50,\n        )\n        self.ax.invert_yaxis()\n\n        panel_copredictivity_legend = self.add_inset(\n            chromatinhd.grid.Panel((0.05, 0.8)), pos=(0.0, 0.0), offset=(0.0, 0.2)\n        )\n        plt.colorbar(\n            mpl.cm.ScalarMappable(norm=norm, cmap=cmap),\n            cax=panel_copredictivity_legend.ax,\n            orientation=\"vertical\",\n        )\n        panel_copredictivity_legend.ax.set_ylabel(\n            \"Co-predictivity\\n(cor $\\\\Delta$cor)\",\n            rotation=0,\n            ha=\"right\",\n            va=\"center\",\n        )\n        panel_copredictivity_legend.ax.yaxis.set_ticks_position(\"left\")\n        panel_copredictivity_legend.ax.yaxis.set_label_position(\"left\")\n\n    @classmethod\n    def from_genepairwindow(cls, genepairwindow, gene, width):\n\"\"\"\n        Plot co-predictivity of a gene using a GenePairWindow object.\n        \"\"\"\n        plotdata = genepairwindow.get_plotdata(gene).reset_index()\n        return cls(plotdata, width)\n</code></pre>"},{"location":"reference/models/pred/plot/#chromatinhd.models.pred.plot.copredictivity.Copredictivity.from_genepairwindow","title":"<code>from_genepairwindow(genepairwindow, gene, width)</code>  <code>classmethod</code>","text":"<p>Plot co-predictivity of a gene using a GenePairWindow object.</p> Source code in <code>src/chromatinhd/models/pred/plot/copredictivity.py</code> <pre><code>@classmethod\ndef from_genepairwindow(cls, genepairwindow, gene, width):\n\"\"\"\n    Plot co-predictivity of a gene using a GenePairWindow object.\n    \"\"\"\n    plotdata = genepairwindow.get_plotdata(gene).reset_index()\n    return cls(plotdata, width)\n</code></pre>"},{"location":"reference/models/pred/plot/#chromatinhd.models.pred.plot.Pileup","title":"<code>Pileup</code>","text":"<p>         Bases: <code>chromatinhd.grid.Panel</code></p> Source code in <code>src/chromatinhd/models/pred/plot/predictivity.py</code> <pre><code>class Pileup(chromatinhd.grid.Panel):\n    def __init__(self, plotdata, window, width):\n        super().__init__((width, 0.5))\n\n        ax = self.ax\n        ax.set_xlim(*window)\n        ax.plot(\n            plotdata[\"position\"],\n            plotdata[\"lost\"],\n            color=\"#333\",\n            lw=1,\n        )\n        ax.fill_between(\n            plotdata[\"position\"],\n            plotdata[\"lost\"],\n            0,\n            color=\"#333\",\n            alpha=0.2,\n            lw=0,\n        )\n        ax.set_xlim(ax.get_xlim())\n        ax.set_ylabel(\n            \"# fragments\\nper 1kb\\nper 1k cells\",\n            rotation=0,\n            ha=\"right\",\n            va=\"center\",\n        )\n\n        # change vertical alignment of last y tick to bottom\n        ax.set_yticks([0, ax.get_ylim()[1]])\n        ax.get_yticklabels()[-1].set_verticalalignment(\"top\")\n        ax.get_yticklabels()[0].set_verticalalignment(\"bottom\")\n\n        # vline at tss\n        ax.axvline(0, color=\"#888888\", lw=0.5, zorder=-1, dashes=(2, 2))\n\n        ax.set_xticks([])\n        ax.set_ylim(0)\n\n    @classmethod\n    def from_genemultiwindow(cls, genemultiwindow, gene, width):\n\"\"\"\n        Plot pileup of a specific gene using a GeneMultiWindow object\n        \"\"\"\n        plotdata = genemultiwindow.get_plotdata(gene).reset_index()\n        window = np.array([plotdata[\"position\"].min(), plotdata[\"position\"].max()])\n        return cls(plotdata, window, width)\n</code></pre>"},{"location":"reference/models/pred/plot/#chromatinhd.models.pred.plot.predictivity.Pileup.from_genemultiwindow","title":"<code>from_genemultiwindow(genemultiwindow, gene, width)</code>  <code>classmethod</code>","text":"<p>Plot pileup of a specific gene using a GeneMultiWindow object</p> Source code in <code>src/chromatinhd/models/pred/plot/predictivity.py</code> <pre><code>@classmethod\ndef from_genemultiwindow(cls, genemultiwindow, gene, width):\n\"\"\"\n    Plot pileup of a specific gene using a GeneMultiWindow object\n    \"\"\"\n    plotdata = genemultiwindow.get_plotdata(gene).reset_index()\n    window = np.array([plotdata[\"position\"].min(), plotdata[\"position\"].max()])\n    return cls(plotdata, window, width)\n</code></pre>"},{"location":"reference/models/pred/plot/#chromatinhd.models.pred.plot.Predictivity","title":"<code>Predictivity</code>","text":"<p>         Bases: <code>chromatinhd.grid.Panel</code></p> <p>Plot predictivity of a gene.</p> Source code in <code>src/chromatinhd/models/pred/plot/predictivity.py</code> <pre><code>class Predictivity(chromatinhd.grid.Panel):\n\"\"\"\n    Plot predictivity of a gene.\n    \"\"\"\n\n    def __init__(self, plotdata, window, width, show_accessibility=False):\n        super().__init__((width, 0.5))\n\n        plotdata[\"effect_sign\"] = np.sign(plotdata[\"effect\"])\n        plotdata[\"segment\"] = plotdata[\"effect_sign\"].diff().ne(0).cumsum()\n\n        ax = self.ax\n        ax.set_xlim(*window)\n\n        for segment, segment_data in plotdata.groupby(\"segment\"):\n            color = \"tomato\" if segment_data[\"effect\"].iloc[0] &gt; 0 else \"#0074D9\"\n            ax.plot(\n                segment_data[\"position\"],\n                segment_data[\"deltacor\"],\n                lw=1,\n                color=color,\n            )\n            ax.fill_between(\n                segment_data[\"position\"],\n                segment_data[\"deltacor\"],\n                0,\n                alpha=0.2,\n                lw=0,\n                color=color,\n            )\n\n        # ax.plot(\n        #     plotdata[\"position\"],\n        #     plotdata[\"deltacor\"],\n        #     color=\"#333\",\n        #     lw=1,\n        # )\n        # ax.fill_between(\n        #     plotdata[\"position\"],\n        #     plotdata[\"deltacor\"],\n        #     0,\n        #     color=\"#333\",\n        #     alpha=0.2,\n        #     lw=0,\n        # )\n\n        ax.set_ylabel(\n            \"Predictivity\\n($\\\\Delta$ cor)\",\n            rotation=0,\n            ha=\"right\",\n            va=\"center\",\n        )\n\n        ax.set_xticks([])\n        ax.invert_yaxis()\n        ax.set_ylim(0, max(-0.05, ax.get_ylim()[1]))\n\n        if show_accessibility:\n            ax2 = self.add_twinx()\n            ax2.plot(\n                plotdata[\"position\"],\n                plotdata[\"lost\"],\n                color=\"tomato\",\n                # color=\"#333\",\n                lw=1,\n            )\n            ax2.fill_between(\n                plotdata[\"position\"],\n                plotdata[\"lost\"],\n                0,\n                color=\"tomato\",\n                alpha=0.2,\n                lw=0,\n            )\n            ax2.set_xlim(ax.get_xlim())\n            ax2.set_ylabel(\n                \"# fragments\\nper 1kb\\nper 1k cells\",\n                rotation=0,\n                ha=\"left\",\n                va=\"center\",\n                color=\"tomato\",\n            )\n            ax2.tick_params(axis=\"y\", colors=\"tomato\")\n            ax2.set_ylim(\n                0,\n                plotdata[\"lost\"].max()\n                / (plotdata[\"deltacor\"].min() / ax.get_ylim()[1]),\n            )\n\n        # change vertical alignment of last y tick to bottom\n        ax.set_yticks([0, ax.get_ylim()[1]])\n        ax.get_yticklabels()[-1].set_verticalalignment(\"top\")\n        ax.get_yticklabels()[0].set_verticalalignment(\"bottom\")\n\n        # vline at tss\n        ax.axvline(0, color=\"#888888\", lw=0.5, zorder=-1, dashes=(2, 2))\n\n    @classmethod\n    def from_genemultiwindow(\n        cls, genemultiwindow, gene, width, show_accessibility=False\n    ):\n\"\"\"\n        Plot predictivity of a specific gene using a GeneMultiWindow object\n        \"\"\"\n        plotdata = genemultiwindow.get_plotdata(gene).reset_index()\n        window = np.array([plotdata[\"position\"].min(), plotdata[\"position\"].max()])\n        return cls(plotdata, window, width, show_accessibility=show_accessibility)\n</code></pre>"},{"location":"reference/models/pred/plot/#chromatinhd.models.pred.plot.predictivity.Predictivity.from_genemultiwindow","title":"<code>from_genemultiwindow(genemultiwindow, gene, width, show_accessibility=False)</code>  <code>classmethod</code>","text":"<p>Plot predictivity of a specific gene using a GeneMultiWindow object</p> Source code in <code>src/chromatinhd/models/pred/plot/predictivity.py</code> <pre><code>@classmethod\ndef from_genemultiwindow(\n    cls, genemultiwindow, gene, width, show_accessibility=False\n):\n\"\"\"\n    Plot predictivity of a specific gene using a GeneMultiWindow object\n    \"\"\"\n    plotdata = genemultiwindow.get_plotdata(gene).reset_index()\n    window = np.array([plotdata[\"position\"].min(), plotdata[\"position\"].max()])\n    return cls(plotdata, window, width, show_accessibility=show_accessibility)\n</code></pre>"}]}